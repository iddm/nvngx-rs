name: CI

on:
  push:
  pull_request:
  schedule:
    - cron: '0 2 * * *'

env:
  minrust: 1.70.0

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          # Windows support for this crate is pending
          # - windows-2025 # 2025 for winget

        toolchain:
          - stable
          - beta
          - nightly

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install toolchain
        id: tc
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain || 'stable' }}
          profile: minimal
          override: true

      - name: Setup cache
        if: runner.os != 'macOS'
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-test-${{ steps.tc.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.toml') }}

      - name: Install Vulkan SDK
        if: ${{ runner.os == 'Linux' }}
        run: sudo apt-get install libvulkan-dev
      - name: Install Vulkan SDK
        if: ${{ runner.os == 'Windows' }}
        run: winget install --accept-package-agreements --accept-source-agreements -e KhronosGroup.VulkanSDK

      - name: Build all features
        if: matrix.features == ''
        run: cargo build --all-features

      - name: Test all features
        if: matrix.features == ''
        run: cargo test --all-features

      - name: Build with no default features
        if: matrix.features == ''
        run: cargo build --no-default-features

  rustfmt:
    name: Format
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: rustfmt
          profile: minimal
          override: true

      - name: Run cargo fmt
        run: cargo fmt --all -- --check

  clippy:
    name: Run clippy
    runs-on: ubuntu-latest # TODO: Matrix to lint all platforms

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install toolchain
        id: tc
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Setup cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-clippy-${{ steps.tc.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.toml') }}

      - name: Install Vulkan SDK
        if: ${{ runner.os == 'Linux' }}
        run: sudo apt-get install libvulkan-dev
      - name: Install Vulkan SDK
        if: ${{ runner.os == 'Windows' }}
        run: winget install --accept-package-agreements -e KhronosGroup.VulkanSDK

      - name: Run clippy with disallowed warnings
        run: cargo clippy --workspace --all-targets --all-features -- -Dwarnings

  MSRV:
    runs-on: ubuntu-latest # TODO: Matrix to lint all platforms

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install toolchain (${{ env.minrust }})
        id: tc
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.minrust }}
          profile: minimal
          override: true

      - name: Setup cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-msrv-${{ steps.tc.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.toml') }}

      - name: Install Vulkan SDK
        if: ${{ runner.os == 'Linux' }}
        run: sudo apt-get install libvulkan-dev
      - name: Install Vulkan SDK
        if: ${{ runner.os == 'Windows' }}
        run: winget install --accept-package-agreements -e KhronosGroup.VulkanSDK

      # Ensure that it still builds, while allowing warnings
      - run: cargo check --all-features

  doc:
    name: Build docs
    runs-on: ubuntu-latest # TODO: Matrix to build docs for platforms

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install toolchain
        id: tc
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true

      - name: Setup cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-docs-${{ steps.tc.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.toml') }}

      - name: Install Vulkan SDK
        if: ${{ runner.os == 'Linux' }}
        run: sudo apt-get install libvulkan-dev
      - name: Install Vulkan SDK
        if: ${{ runner.os == 'Windows' }}
        run: winget install --accept-package-agreements -e KhronosGroup.VulkanSDK

      - name: Build docs
        env:
          RUSTDOCFLAGS: -Dwarnings
        run: cargo doc --workspace --no-deps --all-features --document-private-items
