/* automatically generated by rust-bindgen 0.72.0 */

#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        *self
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
pub const NVSDK_NGX_VERSION_API_MACRO: u32 = 21;
pub const NVSDK_NGX_EParameter_Reserved00: &[u8; 3] = b"#\0\0";
pub const NVSDK_NGX_EParameter_SuperSampling_Available: &[u8; 3] = b"#\x01\0";
pub const NVSDK_NGX_EParameter_InPainting_Available: &[u8; 3] = b"#\x02\0";
pub const NVSDK_NGX_EParameter_ImageSuperResolution_Available: &[u8; 3] = b"#\x03\0";
pub const NVSDK_NGX_EParameter_SlowMotion_Available: &[u8; 3] = b"#\x04\0";
pub const NVSDK_NGX_EParameter_VideoSuperResolution_Available: &[u8; 3] = b"#\x05\0";
pub const NVSDK_NGX_EParameter_Reserved06: &[u8; 3] = b"#\x06\0";
pub const NVSDK_NGX_EParameter_Reserved07: &[u8; 3] = b"#\x07\0";
pub const NVSDK_NGX_EParameter_Reserved08: &[u8; 3] = b"#\x08\0";
pub const NVSDK_NGX_EParameter_ImageSignalProcessing_Available: &[u8; 3] = b"#\t\0";
pub const NVSDK_NGX_EParameter_ImageSuperResolution_ScaleFactor_2_1: &[u8; 3] = b"#\n\0";
pub const NVSDK_NGX_EParameter_ImageSuperResolution_ScaleFactor_3_1: &[u8; 3] = b"#\x0B\0";
pub const NVSDK_NGX_EParameter_ImageSuperResolution_ScaleFactor_3_2: &[u8; 3] = b"#\x0C\0";
pub const NVSDK_NGX_EParameter_ImageSuperResolution_ScaleFactor_4_3: &[u8; 3] = b"#\r\0";
pub const NVSDK_NGX_EParameter_NumFrames: &[u8; 3] = b"#\x0E\0";
pub const NVSDK_NGX_EParameter_Scale: &[u8; 3] = b"#\x0F\0";
pub const NVSDK_NGX_EParameter_Width: &[u8; 3] = b"#\x10\0";
pub const NVSDK_NGX_EParameter_Height: &[u8; 3] = b"#\x11\0";
pub const NVSDK_NGX_EParameter_OutWidth: &[u8; 3] = b"#\x12\0";
pub const NVSDK_NGX_EParameter_OutHeight: &[u8; 3] = b"#\x13\0";
pub const NVSDK_NGX_EParameter_Sharpness: &[u8; 3] = b"#\x14\0";
pub const NVSDK_NGX_EParameter_Scratch: &[u8; 3] = b"#\x15\0";
pub const NVSDK_NGX_EParameter_Scratch_SizeInBytes: &[u8; 3] = b"#\x16\0";
pub const NVSDK_NGX_EParameter_EvaluationNode: &[u8; 3] = b"#\x17\0";
pub const NVSDK_NGX_EParameter_Input1: &[u8; 3] = b"#\x18\0";
pub const NVSDK_NGX_EParameter_Input1_Format: &[u8; 3] = b"#\x19\0";
pub const NVSDK_NGX_EParameter_Input1_SizeInBytes: &[u8; 3] = b"#\x1A\0";
pub const NVSDK_NGX_EParameter_Input2: &[u8; 3] = b"#\x1B\0";
pub const NVSDK_NGX_EParameter_Input2_Format: &[u8; 3] = b"#\x1C\0";
pub const NVSDK_NGX_EParameter_Input2_SizeInBytes: &[u8; 3] = b"#\x1D\0";
pub const NVSDK_NGX_EParameter_Color: &[u8; 3] = b"#\x1E\0";
pub const NVSDK_NGX_EParameter_Color_Format: &[u8; 3] = b"#\x1F\0";
pub const NVSDK_NGX_EParameter_Color_SizeInBytes: &[u8; 3] = b"# \0";
pub const NVSDK_NGX_EParameter_Albedo: &[u8; 3] = b"#!\0";
pub const NVSDK_NGX_EParameter_Output: &[u8; 3] = b"#\"\0";
pub const NVSDK_NGX_EParameter_Output_Format: &[u8; 3] = b"##\0";
pub const NVSDK_NGX_EParameter_Output_SizeInBytes: &[u8; 3] = b"#$\0";
pub const NVSDK_NGX_EParameter_Reset: &[u8; 3] = b"#%\0";
pub const NVSDK_NGX_EParameter_BlendFactor: &[u8; 3] = b"#&\0";
pub const NVSDK_NGX_EParameter_MotionVectors: &[u8; 3] = b"#'\0";
pub const NVSDK_NGX_EParameter_Rect_X: &[u8; 3] = b"#(\0";
pub const NVSDK_NGX_EParameter_Rect_Y: &[u8; 3] = b"#)\0";
pub const NVSDK_NGX_EParameter_Rect_W: &[u8; 3] = b"#*\0";
pub const NVSDK_NGX_EParameter_Rect_H: &[u8; 3] = b"#+\0";
pub const NVSDK_NGX_EParameter_MV_Scale_X: &[u8; 3] = b"#,\0";
pub const NVSDK_NGX_EParameter_MV_Scale_Y: &[u8; 3] = b"#-\0";
pub const NVSDK_NGX_EParameter_Model: &[u8; 3] = b"#.\0";
pub const NVSDK_NGX_EParameter_Format: &[u8; 3] = b"#/\0";
pub const NVSDK_NGX_EParameter_SizeInBytes: &[u8; 3] = b"#0\0";
pub const NVSDK_NGX_EParameter_ResourceAllocCallback: &[u8; 3] = b"#1\0";
pub const NVSDK_NGX_EParameter_BufferAllocCallback: &[u8; 3] = b"#2\0";
pub const NVSDK_NGX_EParameter_Tex2DAllocCallback: &[u8; 3] = b"#3\0";
pub const NVSDK_NGX_EParameter_ResourceReleaseCallback: &[u8; 3] = b"#4\0";
pub const NVSDK_NGX_EParameter_CreationNodeMask: &[u8; 3] = b"#5\0";
pub const NVSDK_NGX_EParameter_VisibilityNodeMask: &[u8; 3] = b"#6\0";
pub const NVSDK_NGX_EParameter_PreviousOutput: &[u8; 3] = b"#7\0";
pub const NVSDK_NGX_EParameter_MV_Offset_X: &[u8; 3] = b"#8\0";
pub const NVSDK_NGX_EParameter_MV_Offset_Y: &[u8; 3] = b"#9\0";
pub const NVSDK_NGX_EParameter_Hint_UseFireflySwatter: &[u8; 3] = b"#:\0";
pub const NVSDK_NGX_EParameter_Resource_Width: &[u8; 3] = b"#;\0";
pub const NVSDK_NGX_EParameter_Resource_Height: &[u8; 3] = b"#<\0";
pub const NVSDK_NGX_EParameter_Depth: &[u8; 3] = b"#=\0";
pub const NVSDK_NGX_EParameter_DLSSOptimalSettingsCallback: &[u8; 3] = b"#>\0";
pub const NVSDK_NGX_EParameter_PerfQualityValue: &[u8; 3] = b"#?\0";
pub const NVSDK_NGX_EParameter_RTXValue: &[u8; 3] = b"#@\0";
pub const NVSDK_NGX_EParameter_DLSSMode: &[u8; 3] = b"#A\0";
pub const NVSDK_NGX_EParameter_DeepResolve_Available: &[u8; 3] = b"#B\0";
pub const NVSDK_NGX_EParameter_Deprecated_43: &[u8; 3] = b"#C\0";
pub const NVSDK_NGX_EParameter_OptLevel: &[u8; 3] = b"#D\0";
pub const NVSDK_NGX_EParameter_IsDevSnippetBranch: &[u8; 3] = b"#E\0";
pub const NVSDK_NGX_EParameter_DeepDVC_Available: &[u8; 3] = b"#F\0";
pub const NVSDK_NGX_EParameter_Graphics_API: &[u8; 3] = b"#G\0";
pub const NVSDK_NGX_EParameter_Reserved_48: &[u8; 3] = b"#H\0";
pub const NVSDK_NGX_EParameter_Reserved_49: &[u8; 3] = b"#I\0";
pub const NVSDK_NGX_Parameter_OptLevel: &[u8; 17] = b"Snippet.OptLevel\0";
pub const NVSDK_NGX_Parameter_IsDevSnippetBranch: &[u8; 20] = b"Snippet.IsDevBranch\0";
pub const NVSDK_NGX_Parameter_SuperSampling_ScaleFactor: &[u8; 26] = b"SuperSampling.ScaleFactor\0";
pub const NVSDK_NGX_Parameter_ImageSignalProcessing_ScaleFactor: &[u8; 34] =
    b"ImageSignalProcessing.ScaleFactor\0";
pub const NVSDK_NGX_Parameter_SuperSampling_Available: &[u8; 24] = b"SuperSampling.Available\0";
pub const NVSDK_NGX_Parameter_InPainting_Available: &[u8; 21] = b"InPainting.Available\0";
pub const NVSDK_NGX_Parameter_ImageSuperResolution_Available: &[u8; 31] =
    b"ImageSuperResolution.Available\0";
pub const NVSDK_NGX_Parameter_SlowMotion_Available: &[u8; 21] = b"SlowMotion.Available\0";
pub const NVSDK_NGX_Parameter_VideoSuperResolution_Available: &[u8; 31] =
    b"VideoSuperResolution.Available\0";
pub const NVSDK_NGX_Parameter_ImageSignalProcessing_Available: &[u8; 32] =
    b"ImageSignalProcessing.Available\0";
pub const NVSDK_NGX_Parameter_DeepResolve_Available: &[u8; 22] = b"DeepResolve.Available\0";
pub const NVSDK_NGX_Parameter_SuperSampling_NeedsUpdatedDriver: &[u8; 33] =
    b"SuperSampling.NeedsUpdatedDriver\0";
pub const NVSDK_NGX_Parameter_InPainting_NeedsUpdatedDriver: &[u8; 30] =
    b"InPainting.NeedsUpdatedDriver\0";
pub const NVSDK_NGX_Parameter_ImageSuperResolution_NeedsUpdatedDriver: &[u8; 40] =
    b"ImageSuperResolution.NeedsUpdatedDriver\0";
pub const NVSDK_NGX_Parameter_SlowMotion_NeedsUpdatedDriver: &[u8; 30] =
    b"SlowMotion.NeedsUpdatedDriver\0";
pub const NVSDK_NGX_Parameter_VideoSuperResolution_NeedsUpdatedDriver: &[u8; 40] =
    b"VideoSuperResolution.NeedsUpdatedDriver\0";
pub const NVSDK_NGX_Parameter_ImageSignalProcessing_NeedsUpdatedDriver: &[u8; 41] =
    b"ImageSignalProcessing.NeedsUpdatedDriver\0";
pub const NVSDK_NGX_Parameter_DeepResolve_NeedsUpdatedDriver: &[u8; 31] =
    b"DeepResolve.NeedsUpdatedDriver\0";
pub const NVSDK_NGX_Parameter_FrameInterpolation_NeedsUpdatedDriver: &[u8; 38] =
    b"FrameInterpolation.NeedsUpdatedDriver\0";
pub const NVSDK_NGX_Parameter_SuperSampling_MinDriverVersionMajor: &[u8; 36] =
    b"SuperSampling.MinDriverVersionMajor\0";
pub const NVSDK_NGX_Parameter_InPainting_MinDriverVersionMajor: &[u8; 33] =
    b"InPainting.MinDriverVersionMajor\0";
pub const NVSDK_NGX_Parameter_ImageSuperResolution_MinDriverVersionMajor: &[u8; 43] =
    b"ImageSuperResolution.MinDriverVersionMajor\0";
pub const NVSDK_NGX_Parameter_SlowMotion_MinDriverVersionMajor: &[u8; 33] =
    b"SlowMotion.MinDriverVersionMajor\0";
pub const NVSDK_NGX_Parameter_VideoSuperResolution_MinDriverVersionMajor: &[u8; 43] =
    b"VideoSuperResolution.MinDriverVersionMajor\0";
pub const NVSDK_NGX_Parameter_ImageSignalProcessing_MinDriverVersionMajor: &[u8; 44] =
    b"ImageSignalProcessing.MinDriverVersionMajor\0";
pub const NVSDK_NGX_Parameter_DeepResolve_MinDriverVersionMajor: &[u8; 34] =
    b"DeepResolve.MinDriverVersionMajor\0";
pub const NVSDK_NGX_Parameter_FrameInterpolation_MinDriverVersionMajor: &[u8; 41] =
    b"FrameInterpolation.MinDriverVersionMajor\0";
pub const NVSDK_NGX_Parameter_SuperSampling_MinDriverVersionMinor: &[u8; 36] =
    b"SuperSampling.MinDriverVersionMinor\0";
pub const NVSDK_NGX_Parameter_InPainting_MinDriverVersionMinor: &[u8; 33] =
    b"InPainting.MinDriverVersionMinor\0";
pub const NVSDK_NGX_Parameter_ImageSuperResolution_MinDriverVersionMinor: &[u8; 43] =
    b"ImageSuperResolution.MinDriverVersionMinor\0";
pub const NVSDK_NGX_Parameter_SlowMotion_MinDriverVersionMinor: &[u8; 33] =
    b"SlowMotion.MinDriverVersionMinor\0";
pub const NVSDK_NGX_Parameter_VideoSuperResolution_MinDriverVersionMinor: &[u8; 43] =
    b"VideoSuperResolution.MinDriverVersionMinor\0";
pub const NVSDK_NGX_Parameter_ImageSignalProcessing_MinDriverVersionMinor: &[u8; 44] =
    b"ImageSignalProcessing.MinDriverVersionMinor\0";
pub const NVSDK_NGX_Parameter_DeepResolve_MinDriverVersionMinor: &[u8; 34] =
    b"DeepResolve.MinDriverVersionMinor\0";
pub const NVSDK_NGX_Parameter_SuperSampling_FeatureInitResult: &[u8; 32] =
    b"SuperSampling.FeatureInitResult\0";
pub const NVSDK_NGX_Parameter_InPainting_FeatureInitResult: &[u8; 29] =
    b"InPainting.FeatureInitResult\0";
pub const NVSDK_NGX_Parameter_ImageSuperResolution_FeatureInitResult: &[u8; 39] =
    b"ImageSuperResolution.FeatureInitResult\0";
pub const NVSDK_NGX_Parameter_SlowMotion_FeatureInitResult: &[u8; 29] =
    b"SlowMotion.FeatureInitResult\0";
pub const NVSDK_NGX_Parameter_VideoSuperResolution_FeatureInitResult: &[u8; 39] =
    b"VideoSuperResolution.FeatureInitResult\0";
pub const NVSDK_NGX_Parameter_ImageSignalProcessing_FeatureInitResult: &[u8; 40] =
    b"ImageSignalProcessing.FeatureInitResult\0";
pub const NVSDK_NGX_Parameter_DeepResolve_FeatureInitResult: &[u8; 30] =
    b"DeepResolve.FeatureInitResult\0";
pub const NVSDK_NGX_Parameter_FrameInterpolation_FeatureInitResult: &[u8; 37] =
    b"FrameInterpolation.FeatureInitResult\0";
pub const NVSDK_NGX_Parameter_ImageSuperResolution_ScaleFactor_2_1: &[u8; 37] =
    b"ImageSuperResolution.ScaleFactor.2.1\0";
pub const NVSDK_NGX_Parameter_ImageSuperResolution_ScaleFactor_3_1: &[u8; 37] =
    b"ImageSuperResolution.ScaleFactor.3.1\0";
pub const NVSDK_NGX_Parameter_ImageSuperResolution_ScaleFactor_3_2: &[u8; 37] =
    b"ImageSuperResolution.ScaleFactor.3.2\0";
pub const NVSDK_NGX_Parameter_ImageSuperResolution_ScaleFactor_4_3: &[u8; 37] =
    b"ImageSuperResolution.ScaleFactor.4.3\0";
pub const NVSDK_NGX_Parameter_NumFrames: &[u8; 10] = b"NumFrames\0";
pub const NVSDK_NGX_Parameter_Scale: &[u8; 6] = b"Scale\0";
pub const NVSDK_NGX_Parameter_Width: &[u8; 6] = b"Width\0";
pub const NVSDK_NGX_Parameter_Height: &[u8; 7] = b"Height\0";
pub const NVSDK_NGX_Parameter_OutWidth: &[u8; 9] = b"OutWidth\0";
pub const NVSDK_NGX_Parameter_OutHeight: &[u8; 10] = b"OutHeight\0";
pub const NVSDK_NGX_Parameter_Sharpness: &[u8; 10] = b"Sharpness\0";
pub const NVSDK_NGX_Parameter_Scratch: &[u8; 8] = b"Scratch\0";
pub const NVSDK_NGX_Parameter_Scratch_SizeInBytes: &[u8; 20] = b"Scratch.SizeInBytes\0";
pub const NVSDK_NGX_Parameter_Input1: &[u8; 7] = b"Input1\0";
pub const NVSDK_NGX_Parameter_Input1_Format: &[u8; 14] = b"Input1.Format\0";
pub const NVSDK_NGX_Parameter_Input1_SizeInBytes: &[u8; 19] = b"Input1.SizeInBytes\0";
pub const NVSDK_NGX_Parameter_Input2: &[u8; 7] = b"Input2\0";
pub const NVSDK_NGX_Parameter_Input2_Format: &[u8; 14] = b"Input2.Format\0";
pub const NVSDK_NGX_Parameter_Input2_SizeInBytes: &[u8; 19] = b"Input2.SizeInBytes\0";
pub const NVSDK_NGX_Parameter_Color: &[u8; 6] = b"Color\0";
pub const NVSDK_NGX_Parameter_Color_Format: &[u8; 13] = b"Color.Format\0";
pub const NVSDK_NGX_Parameter_Color_SizeInBytes: &[u8; 18] = b"Color.SizeInBytes\0";
pub const NVSDK_NGX_Parameter_FI_Color1: &[u8; 7] = b"Color1\0";
pub const NVSDK_NGX_Parameter_FI_Color2: &[u8; 7] = b"Color2\0";
pub const NVSDK_NGX_Parameter_Albedo: &[u8; 7] = b"Albedo\0";
pub const NVSDK_NGX_Parameter_Output: &[u8; 7] = b"Output\0";
pub const NVSDK_NGX_Parameter_Output_Format: &[u8; 14] = b"Output.Format\0";
pub const NVSDK_NGX_Parameter_Output_SizeInBytes: &[u8; 19] = b"Output.SizeInBytes\0";
pub const NVSDK_NGX_Parameter_FI_Output1: &[u8; 8] = b"Output1\0";
pub const NVSDK_NGX_Parameter_FI_Output2: &[u8; 8] = b"Output2\0";
pub const NVSDK_NGX_Parameter_FI_Output3: &[u8; 8] = b"Output3\0";
pub const NVSDK_NGX_Parameter_Reset: &[u8; 6] = b"Reset\0";
pub const NVSDK_NGX_Parameter_BlendFactor: &[u8; 12] = b"BlendFactor\0";
pub const NVSDK_NGX_Parameter_MotionVectors: &[u8; 14] = b"MotionVectors\0";
pub const NVSDK_NGX_Parameter_FI_MotionVectors1: &[u8; 15] = b"MotionVectors1\0";
pub const NVSDK_NGX_Parameter_FI_MotionVectors2: &[u8; 15] = b"MotionVectors2\0";
pub const NVSDK_NGX_Parameter_Rect_X: &[u8; 7] = b"Rect.X\0";
pub const NVSDK_NGX_Parameter_Rect_Y: &[u8; 7] = b"Rect.Y\0";
pub const NVSDK_NGX_Parameter_Rect_W: &[u8; 7] = b"Rect.W\0";
pub const NVSDK_NGX_Parameter_Rect_H: &[u8; 7] = b"Rect.H\0";
pub const NVSDK_NGX_Parameter_OutRect_X: &[u8; 10] = b"OutRect.X\0";
pub const NVSDK_NGX_Parameter_OutRect_Y: &[u8; 10] = b"OutRect.Y\0";
pub const NVSDK_NGX_Parameter_OutRect_W: &[u8; 10] = b"OutRect.W\0";
pub const NVSDK_NGX_Parameter_OutRect_H: &[u8; 10] = b"OutRect.H\0";
pub const NVSDK_NGX_Parameter_MV_Scale_X: &[u8; 11] = b"MV.Scale.X\0";
pub const NVSDK_NGX_Parameter_MV_Scale_Y: &[u8; 11] = b"MV.Scale.Y\0";
pub const NVSDK_NGX_Parameter_Model: &[u8; 6] = b"Model\0";
pub const NVSDK_NGX_Parameter_Format: &[u8; 7] = b"Format\0";
pub const NVSDK_NGX_Parameter_SizeInBytes: &[u8; 12] = b"SizeInBytes\0";
pub const NVSDK_NGX_Parameter_ResourceAllocCallback: &[u8; 22] = b"ResourceAllocCallback\0";
pub const NVSDK_NGX_Parameter_BufferAllocCallback: &[u8; 20] = b"BufferAllocCallback\0";
pub const NVSDK_NGX_Parameter_Tex2DAllocCallback: &[u8; 19] = b"Tex2DAllocCallback\0";
pub const NVSDK_NGX_Parameter_ResourceReleaseCallback: &[u8; 24] = b"ResourceReleaseCallback\0";
pub const NVSDK_NGX_Parameter_CreationNodeMask: &[u8; 17] = b"CreationNodeMask\0";
pub const NVSDK_NGX_Parameter_VisibilityNodeMask: &[u8; 19] = b"VisibilityNodeMask\0";
pub const NVSDK_NGX_Parameter_MV_Offset_X: &[u8; 12] = b"MV.Offset.X\0";
pub const NVSDK_NGX_Parameter_MV_Offset_Y: &[u8; 12] = b"MV.Offset.Y\0";
pub const NVSDK_NGX_Parameter_Hint_UseFireflySwatter: &[u8; 23] = b"Hint.UseFireflySwatter\0";
pub const NVSDK_NGX_Parameter_Resource_Width: &[u8; 14] = b"ResourceWidth\0";
pub const NVSDK_NGX_Parameter_Resource_Height: &[u8; 15] = b"ResourceHeight\0";
pub const NVSDK_NGX_Parameter_Resource_OutWidth: &[u8; 17] = b"ResourceOutWidth\0";
pub const NVSDK_NGX_Parameter_Resource_OutHeight: &[u8; 18] = b"ResourceOutHeight\0";
pub const NVSDK_NGX_Parameter_Depth: &[u8; 6] = b"Depth\0";
pub const NVSDK_NGX_Parameter_FI_Depth1: &[u8; 7] = b"Depth1\0";
pub const NVSDK_NGX_Parameter_FI_Depth2: &[u8; 7] = b"Depth2\0";
pub const NVSDK_NGX_Parameter_DLSSOptimalSettingsCallback: &[u8; 28] =
    b"DLSSOptimalSettingsCallback\0";
pub const NVSDK_NGX_Parameter_DLSSGetStatsCallback: &[u8; 21] = b"DLSSGetStatsCallback\0";
pub const NVSDK_NGX_Parameter_PerfQualityValue: &[u8; 17] = b"PerfQualityValue\0";
pub const NVSDK_NGX_Parameter_RTXValue: &[u8; 9] = b"RTXValue\0";
pub const NVSDK_NGX_Parameter_DLSSMode: &[u8; 9] = b"DLSSMode\0";
pub const NVSDK_NGX_Parameter_FI_Mode: &[u8; 7] = b"FIMode\0";
pub const NVSDK_NGX_Parameter_FI_OF_Preset: &[u8; 11] = b"FIOFPreset\0";
pub const NVSDK_NGX_Parameter_FI_OF_GridSize: &[u8; 13] = b"FIOFGridSize\0";
pub const NVSDK_NGX_Parameter_Jitter_Offset_X: &[u8; 16] = b"Jitter.Offset.X\0";
pub const NVSDK_NGX_Parameter_Jitter_Offset_Y: &[u8; 16] = b"Jitter.Offset.Y\0";
pub const NVSDK_NGX_Parameter_Denoise: &[u8; 8] = b"Denoise\0";
pub const NVSDK_NGX_Parameter_TransparencyMask: &[u8; 17] = b"TransparencyMask\0";
pub const NVSDK_NGX_Parameter_ExposureTexture: &[u8; 16] = b"ExposureTexture\0";
pub const NVSDK_NGX_Parameter_DLSS_Feature_Create_Flags: &[u8; 26] = b"DLSS.Feature.Create.Flags\0";
pub const NVSDK_NGX_Parameter_DLSS_Checkerboard_Jitter_Hack: &[u8; 30] =
    b"DLSS.Checkerboard.Jitter.Hack\0";
pub const NVSDK_NGX_Parameter_GBuffer_Normals: &[u8; 16] = b"GBuffer.Normals\0";
pub const NVSDK_NGX_Parameter_GBuffer_Albedo: &[u8; 15] = b"GBuffer.Albedo\0";
pub const NVSDK_NGX_Parameter_GBuffer_Roughness: &[u8; 18] = b"GBuffer.Roughness\0";
pub const NVSDK_NGX_Parameter_GBuffer_DiffuseAlbedo: &[u8; 22] = b"GBuffer.DiffuseAlbedo\0";
pub const NVSDK_NGX_Parameter_GBuffer_SpecularAlbedo: &[u8; 23] = b"GBuffer.SpecularAlbedo\0";
pub const NVSDK_NGX_Parameter_GBuffer_IndirectAlbedo: &[u8; 23] = b"GBuffer.IndirectAlbedo\0";
pub const NVSDK_NGX_Parameter_GBuffer_SpecularMvec: &[u8; 21] = b"GBuffer.SpecularMvec\0";
pub const NVSDK_NGX_Parameter_GBuffer_DisocclusionMask: &[u8; 25] = b"GBuffer.DisocclusionMask\0";
pub const NVSDK_NGX_Parameter_GBuffer_Metallic: &[u8; 17] = b"GBuffer.Metallic\0";
pub const NVSDK_NGX_Parameter_GBuffer_Specular: &[u8; 17] = b"GBuffer.Specular\0";
pub const NVSDK_NGX_Parameter_GBuffer_Subsurface: &[u8; 19] = b"GBuffer.Subsurface\0";
pub const NVSDK_NGX_Parameter_GBuffer_ShadingModelId: &[u8; 23] = b"GBuffer.ShadingModelId\0";
pub const NVSDK_NGX_Parameter_GBuffer_MaterialId: &[u8; 19] = b"GBuffer.MaterialId\0";
pub const NVSDK_NGX_Parameter_GBuffer_Atrrib_8: &[u8; 17] = b"GBuffer.Attrib.8\0";
pub const NVSDK_NGX_Parameter_GBuffer_Atrrib_9: &[u8; 17] = b"GBuffer.Attrib.9\0";
pub const NVSDK_NGX_Parameter_GBuffer_Atrrib_10: &[u8; 18] = b"GBuffer.Attrib.10\0";
pub const NVSDK_NGX_Parameter_GBuffer_Atrrib_11: &[u8; 18] = b"GBuffer.Attrib.11\0";
pub const NVSDK_NGX_Parameter_GBuffer_Atrrib_12: &[u8; 18] = b"GBuffer.Attrib.12\0";
pub const NVSDK_NGX_Parameter_GBuffer_Atrrib_13: &[u8; 18] = b"GBuffer.Attrib.13\0";
pub const NVSDK_NGX_Parameter_GBuffer_Atrrib_14: &[u8; 18] = b"GBuffer.Attrib.14\0";
pub const NVSDK_NGX_Parameter_GBuffer_Atrrib_15: &[u8; 18] = b"GBuffer.Attrib.15\0";
pub const NVSDK_NGX_Parameter_TonemapperType: &[u8; 15] = b"TonemapperType\0";
pub const NVSDK_NGX_Parameter_FreeMemOnReleaseFeature: &[u8; 24] = b"FreeMemOnReleaseFeature\0";
pub const NVSDK_NGX_Parameter_MotionVectors3D: &[u8; 16] = b"MotionVectors3D\0";
pub const NVSDK_NGX_Parameter_IsParticleMask: &[u8; 15] = b"IsParticleMask\0";
pub const NVSDK_NGX_Parameter_AnimatedTextureMask: &[u8; 20] = b"AnimatedTextureMask\0";
pub const NVSDK_NGX_Parameter_DepthHighRes: &[u8; 13] = b"DepthHighRes\0";
pub const NVSDK_NGX_Parameter_Position_ViewSpace: &[u8; 19] = b"Position.ViewSpace\0";
pub const NVSDK_NGX_Parameter_FrameTimeDeltaInMsec: &[u8; 21] = b"FrameTimeDeltaInMsec\0";
pub const NVSDK_NGX_Parameter_RayTracingHitDistance: &[u8; 22] = b"RayTracingHitDistance\0";
pub const NVSDK_NGX_Parameter_MotionVectorsReflection: &[u8; 24] = b"MotionVectorsReflection\0";
pub const NVSDK_NGX_Parameter_DLSS_Enable_Output_Subrects: &[u8; 28] =
    b"DLSS.Enable.Output.Subrects\0";
pub const NVSDK_NGX_Parameter_DLSS_Input_Color_Subrect_Base_X: &[u8; 32] =
    b"DLSS.Input.Color.Subrect.Base.X\0";
pub const NVSDK_NGX_Parameter_DLSS_Input_Color_Subrect_Base_Y: &[u8; 32] =
    b"DLSS.Input.Color.Subrect.Base.Y\0";
pub const NVSDK_NGX_Parameter_DLSS_Input_Depth_Subrect_Base_X: &[u8; 32] =
    b"DLSS.Input.Depth.Subrect.Base.X\0";
pub const NVSDK_NGX_Parameter_DLSS_Input_Depth_Subrect_Base_Y: &[u8; 32] =
    b"DLSS.Input.Depth.Subrect.Base.Y\0";
pub const NVSDK_NGX_Parameter_DLSS_Input_MV_SubrectBase_X: &[u8; 29] =
    b"DLSS.Input.MV.Subrect.Base.X\0";
pub const NVSDK_NGX_Parameter_DLSS_Input_MV_SubrectBase_Y: &[u8; 29] =
    b"DLSS.Input.MV.Subrect.Base.Y\0";
pub const NVSDK_NGX_Parameter_DLSS_Input_Translucency_SubrectBase_X: &[u8; 39] =
    b"DLSS.Input.Translucency.Subrect.Base.X\0";
pub const NVSDK_NGX_Parameter_DLSS_Input_Translucency_SubrectBase_Y: &[u8; 39] =
    b"DLSS.Input.Translucency.Subrect.Base.Y\0";
pub const NVSDK_NGX_Parameter_DLSS_Output_Subrect_Base_X: &[u8; 27] =
    b"DLSS.Output.Subrect.Base.X\0";
pub const NVSDK_NGX_Parameter_DLSS_Output_Subrect_Base_Y: &[u8; 27] =
    b"DLSS.Output.Subrect.Base.Y\0";
pub const NVSDK_NGX_Parameter_DLSS_Render_Subrect_Dimensions_Width: &[u8; 37] =
    b"DLSS.Render.Subrect.Dimensions.Width\0";
pub const NVSDK_NGX_Parameter_DLSS_Render_Subrect_Dimensions_Height: &[u8; 38] =
    b"DLSS.Render.Subrect.Dimensions.Height\0";
pub const NVSDK_NGX_Parameter_DLSS_Pre_Exposure: &[u8; 18] = b"DLSS.Pre.Exposure\0";
pub const NVSDK_NGX_Parameter_DLSS_Exposure_Scale: &[u8; 20] = b"DLSS.Exposure.Scale\0";
pub const NVSDK_NGX_Parameter_DLSS_Input_Bias_Current_Color_Mask: &[u8; 35] =
    b"DLSS.Input.Bias.Current.Color.Mask\0";
pub const NVSDK_NGX_Parameter_DLSS_Input_Bias_Current_Color_SubrectBase_X: &[u8; 45] =
    b"DLSS.Input.Bias.Current.Color.Subrect.Base.X\0";
pub const NVSDK_NGX_Parameter_DLSS_Input_Bias_Current_Color_SubrectBase_Y: &[u8; 45] =
    b"DLSS.Input.Bias.Current.Color.Subrect.Base.Y\0";
pub const NVSDK_NGX_Parameter_DLSS_Indicator_Invert_Y_Axis: &[u8; 29] =
    b"DLSS.Indicator.Invert.Y.Axis\0";
pub const NVSDK_NGX_Parameter_DLSS_Indicator_Invert_X_Axis: &[u8; 29] =
    b"DLSS.Indicator.Invert.X.Axis\0";
pub const NVSDK_NGX_Parameter_DLSS_INV_VIEW_PROJECTION_MATRIX: &[u8; 24] =
    b"InvViewProjectionMatrix\0";
pub const NVSDK_NGX_Parameter_DLSS_CLIP_TO_PREV_CLIP_MATRIX: &[u8; 21] = b"ClipToPrevClipMatrix\0";
pub const NVSDK_NGX_Parameter_DLSS_TransparencyLayer: &[u8; 23] = b"DLSS.TransparencyLayer\0";
pub const NVSDK_NGX_Parameter_DLSS_TransparencyLayer_Subrect_Base_X: &[u8; 38] =
    b"DLSS.TransparencyLayer.Subrect.Base.X\0";
pub const NVSDK_NGX_Parameter_DLSS_TransparencyLayer_Subrect_Base_Y: &[u8; 38] =
    b"DLSS.TransparencyLayer.Subrect.Base.Y\0";
pub const NVSDK_NGX_Parameter_DLSS_TransparencyLayerOpacity: &[u8; 30] =
    b"DLSS.TransparencyLayerOpacity\0";
pub const NVSDK_NGX_Parameter_DLSS_TransparencyLayerOpacity_Subrect_Base_X: &[u8; 45] =
    b"DLSS.TransparencyLayerOpacity.Subrect.Base.X\0";
pub const NVSDK_NGX_Parameter_DLSS_TransparencyLayerOpacity_Subrect_Base_Y: &[u8; 45] =
    b"DLSS.TransparencyLayerOpacity.Subrect.Base.Y\0";
pub const NVSDK_NGX_Parameter_DLSS_TransparencyLayerMvecs: &[u8; 28] =
    b"DLSS.TransparencyLayerMvecs\0";
pub const NVSDK_NGX_Parameter_DLSS_TransparencyLayerMvecs_Subrect_Base_X: &[u8; 43] =
    b"DLSS.TransparencyLayerMvecs.Subrect.Base.X\0";
pub const NVSDK_NGX_Parameter_DLSS_TransparencyLayerMvecs_Subrect_Base_Y: &[u8; 43] =
    b"DLSS.TransparencyLayerMvecs.Subrect.Base.Y\0";
pub const NVSDK_NGX_Parameter_DLSS_DisocclusionMask: &[u8; 22] = b"DLSS.DisocclusionMask\0";
pub const NVSDK_NGX_Parameter_DLSS_DisocclusionMask_Subrect_Base_X: &[u8; 37] =
    b"DLSS.DisocclusionMask.Subrect.Base.X\0";
pub const NVSDK_NGX_Parameter_DLSS_DisocclusionMask_Subrect_Base_Y: &[u8; 37] =
    b"DLSS.DisocclusionMask.Subrect.Base.Y\0";
pub const NVSDK_NGX_Parameter_DLSS_Get_Dynamic_Max_Render_Width: &[u8; 34] =
    b"DLSS.Get.Dynamic.Max.Render.Width\0";
pub const NVSDK_NGX_Parameter_DLSS_Get_Dynamic_Max_Render_Height: &[u8; 35] =
    b"DLSS.Get.Dynamic.Max.Render.Height\0";
pub const NVSDK_NGX_Parameter_DLSS_Get_Dynamic_Min_Render_Width: &[u8; 34] =
    b"DLSS.Get.Dynamic.Min.Render.Width\0";
pub const NVSDK_NGX_Parameter_DLSS_Get_Dynamic_Min_Render_Height: &[u8; 35] =
    b"DLSS.Get.Dynamic.Min.Render.Height\0";
pub const NVSDK_NGX_Parameter_DLSS_Hint_Render_Preset_DLAA: &[u8; 29] =
    b"DLSS.Hint.Render.Preset.DLAA\0";
pub const NVSDK_NGX_Parameter_DLSS_Hint_Render_Preset_Quality: &[u8; 32] =
    b"DLSS.Hint.Render.Preset.Quality\0";
pub const NVSDK_NGX_Parameter_DLSS_Hint_Render_Preset_Balanced: &[u8; 33] =
    b"DLSS.Hint.Render.Preset.Balanced\0";
pub const NVSDK_NGX_Parameter_DLSS_Hint_Render_Preset_Performance: &[u8; 36] =
    b"DLSS.Hint.Render.Preset.Performance\0";
pub const NVSDK_NGX_Parameter_DLSS_Hint_Render_Preset_UltraPerformance: &[u8; 41] =
    b"DLSS.Hint.Render.Preset.UltraPerformance\0";
pub const NVSDK_NGX_Parameter_DLSS_Hint_Render_Preset_UltraQuality: &[u8; 37] =
    b"DLSS.Hint.Render.Preset.UltraQuality\0";
pub const NVSDK_NGX_Parameter_DLSS_Denoise_Mode: &[u8; 18] = b"DLSS.Denoise.Mode\0";
pub const NVSDK_NGX_Parameter_DLSS_Roughness_Mode: &[u8; 20] = b"DLSS.Roughness.Mode\0";
pub const NVSDK_NGX_Parameter_DiffuseAlbedo: &[u8; 25] = b"DLSS.Input.DiffuseAlbedo\0";
pub const NVSDK_NGX_Parameter_SpecularAlbedo: &[u8; 26] = b"DLSS.Input.SpecularAlbedo\0";
pub const NVSDK_NGX_Parameter_DLSS_Input_DiffuseAlbedo_Subrect_Base_X: &[u8; 40] =
    b"DLSS.Input.DiffuseAlbedo.Subrect.Base.X\0";
pub const NVSDK_NGX_Parameter_DLSS_Input_DiffuseAlbedo_Subrect_Base_Y: &[u8; 40] =
    b"DLSS.Input.DiffuseAlbedo.Subrect.Base.Y\0";
pub const NVSDK_NGX_Parameter_DLSS_Input_SpecularAlbedo_Subrect_Base_X: &[u8; 41] =
    b"DLSS.Input.SpecularAlbedo.Subrect.Base.X\0";
pub const NVSDK_NGX_Parameter_DLSS_Input_SpecularAlbedo_Subrect_Base_Y: &[u8; 41] =
    b"DLSS.Input.SpecularAlbedo.Subrect.Base.Y\0";
pub const NVSDK_NGX_Parameter_DLSS_Input_Normals_Subrect_Base_X: &[u8; 34] =
    b"DLSS.Input.Normals.Subrect.Base.X\0";
pub const NVSDK_NGX_Parameter_DLSS_Input_Normals_Subrect_Base_Y: &[u8; 34] =
    b"DLSS.Input.Normals.Subrect.Base.Y\0";
pub const NVSDK_NGX_Parameter_DLSS_Input_Roughness_Subrect_Base_X: &[u8; 36] =
    b"DLSS.Input.Roughness.Subrect.Base.X\0";
pub const NVSDK_NGX_Parameter_DLSS_Input_Roughness_Subrect_Base_Y: &[u8; 36] =
    b"DLSS.Input.Roughness.Subrect.Base.Y\0";
pub const NVSDK_NGX_Parameter_ViewToClipMatrix: &[u8; 17] = b"ViewToClipMatrix\0";
pub const NVSDK_NGX_Parameter_GBuffer_Emissive: &[u8; 17] = b"GBuffer.Emissive\0";
pub const NVSDK_NGX_Parameter_Use_Folded_Network: &[u8; 24] = b"DLSS.Use.Folded.Network\0";
pub const NVSDK_NGX_Parameter_Diffuse_Ray_Direction: &[u8; 22] = b"Diffuse.Ray.Direction\0";
pub const NVSDK_NGX_Parameter_DLSS_WORLD_TO_VIEW_MATRIX: &[u8; 18] = b"WorldToViewMatrix\0";
pub const NVSDK_NGX_Parameter_DLSS_VIEW_TO_CLIP_MATRIX: &[u8; 17] = b"ViewToClipMatrix\0";
pub const NVSDK_NGX_Parameter_Use_HW_Depth: &[u8; 18] = b"DLSS.Use.HW.Depth\0";
pub const NVSDK_NGX_Parameter_DLSSD_ReflectedAlbedo: &[u8; 22] = b"DLSSD.ReflectedAlbedo\0";
pub const NVSDK_NGX_Parameter_DLSSD_ColorBeforeParticles: &[u8; 27] =
    b"DLSSD.ColorBeforeParticles\0";
pub const NVSDK_NGX_Parameter_DLSSD_ColorAfterParticles: &[u8; 26] = b"DLSSD.ColorAfterParticles\0";
pub const NVSDK_NGX_Parameter_DLSSD_ColorBeforeTransparency: &[u8; 30] =
    b"DLSSD.ColorBeforeTransparency\0";
pub const NVSDK_NGX_Parameter_DLSSD_ColorAfterTransparency: &[u8; 29] =
    b"DLSSD.ColorAfterTransparency\0";
pub const NVSDK_NGX_Parameter_DLSSD_ColorBeforeFog: &[u8; 21] = b"DLSSD.ColorBeforeFog\0";
pub const NVSDK_NGX_Parameter_DLSSD_ColorAfterFog: &[u8; 20] = b"DLSSD.ColorAfterFog\0";
pub const NVSDK_NGX_Parameter_DLSSD_ScreenSpaceSubsurfaceScatteringGuide: &[u8; 43] =
    b"DLSSD.ScreenSpaceSubsurfaceScatteringGuide\0";
pub const NVSDK_NGX_Parameter_DLSSD_ColorBeforeScreenSpaceSubsurfaceScattering: &[u8; 49] =
    b"DLSSD.ColorBeforeScreenSpaceSubsurfaceScattering\0";
pub const NVSDK_NGX_Parameter_DLSSD_ColorAfterScreenSpaceSubsurfaceScattering: &[u8; 48] =
    b"DLSSD.ColorAfterScreenSpaceSubsurfaceScattering\0";
pub const NVSDK_NGX_Parameter_DLSSD_ScreenSpaceRefractionGuide: &[u8; 33] =
    b"DLSSD.ScreenSpaceRefractionGuide\0";
pub const NVSDK_NGX_Parameter_DLSSD_ColorBeforeScreenSpaceRefraction: &[u8; 39] =
    b"DLSSD.ColorBeforeScreenSpaceRefraction\0";
pub const NVSDK_NGX_Parameter_DLSSD_ColorAfterScreenSpaceRefraction: &[u8; 38] =
    b"DLSSD.ColorAfterScreenSpaceRefraction\0";
pub const NVSDK_NGX_Parameter_DLSSD_DepthOfFieldGuide: &[u8; 24] = b"DLSSD.DepthOfFieldGuide\0";
pub const NVSDK_NGX_Parameter_DLSSD_ColorBeforeDepthOfField: &[u8; 30] =
    b"DLSSD.ColorBeforeDepthOfField\0";
pub const NVSDK_NGX_Parameter_DLSSD_ColorAfterDepthOfField: &[u8; 29] =
    b"DLSSD.ColorAfterDepthOfField\0";
pub const NVSDK_NGX_Parameter_DLSSD_DiffuseHitDistance: &[u8; 25] = b"DLSSD.DiffuseHitDistance\0";
pub const NVSDK_NGX_Parameter_DLSSD_SpecularHitDistance: &[u8; 26] = b"DLSSD.SpecularHitDistance\0";
pub const NVSDK_NGX_Parameter_DLSSD_DiffuseRayDirection: &[u8; 26] = b"DLSSD.DiffuseRayDirection\0";
pub const NVSDK_NGX_Parameter_DLSSD_SpecularRayDirection: &[u8; 27] =
    b"DLSSD.SpecularRayDirection\0";
pub const NVSDK_NGX_Parameter_DLSSD_DiffuseRayDirectionHitDistance: &[u8; 37] =
    b"DLSSD.DiffuseRayDirectionHitDistance\0";
pub const NVSDK_NGX_Parameter_DLSSD_SpecularRayDirectionHitDistance: &[u8; 38] =
    b"DLSSD.SpecularRayDirectionHitDistance\0";
pub const NVSDK_NGX_Parameter_DLSSD_ReflectedAlbedo_Subrect_Base_X: &[u8; 37] =
    b"DLSSD.ReflectedAlbedo.Subrect.Base.X\0";
pub const NVSDK_NGX_Parameter_DLSSD_ReflectedAlbedo_Subrect_Base_Y: &[u8; 37] =
    b"DLSSD.ReflectedAlbedo.Subrect.Base.Y\0";
pub const NVSDK_NGX_Parameter_DLSSD_ColorBeforeParticles_Subrect_Base_X: &[u8; 42] =
    b"DLSSD.ColorBeforeParticles.Subrect.Base.X\0";
pub const NVSDK_NGX_Parameter_DLSSD_ColorBeforeParticles_Subrect_Base_Y: &[u8; 42] =
    b"DLSSD.ColorBeforeParticles.Subrect.Base.Y\0";
pub const NVSDK_NGX_Parameter_DLSSD_ColorAfterParticles_Subrect_Base_X: &[u8; 41] =
    b"DLSSD.ColorAfterParticles.Subrect.Base.X\0";
pub const NVSDK_NGX_Parameter_DLSSD_ColorAfterParticles_Subrect_Base_Y: &[u8; 41] =
    b"DLSSD.ColorAfterParticles.Subrect.Base.Y\0";
pub const NVSDK_NGX_Parameter_DLSSD_ColorBeforeTransparency_Subrect_Base_X: &[u8; 45] =
    b"DLSSD.ColorBeforeTransparency.Subrect.Base.X\0";
pub const NVSDK_NGX_Parameter_DLSSD_ColorBeforeTransparency_Subrect_Base_Y: &[u8; 45] =
    b"DLSSD.ColorBeforeTransparency.Subrect.Base.Y\0";
pub const NVSDK_NGX_Parameter_DLSSD_ColorAfterTransparency_Subrect_Base_X: &[u8; 44] =
    b"DLSSD.ColorAfterTransparency.Subrect.Base.X\0";
pub const NVSDK_NGX_Parameter_DLSSD_ColorAfterTransparency_Subrect_Base_Y: &[u8; 44] =
    b"DLSSD.ColorAfterTransparency.Subrect.Base.Y\0";
pub const NVSDK_NGX_Parameter_DLSSD_ColorBeforeFog_Subrect_Base_X: &[u8; 36] =
    b"DLSSD.ColorBeforeFog.Subrect.Base.X\0";
pub const NVSDK_NGX_Parameter_DLSSD_ColorBeforeFog_Subrect_Base_Y: &[u8; 36] =
    b"DLSSD.ColorBeforeFog.Subrect.Base.Y\0";
pub const NVSDK_NGX_Parameter_DLSSD_ColorAfterFog_Subrect_Base_X: &[u8; 35] =
    b"DLSSD.ColorAfterFog.Subrect.Base.X\0";
pub const NVSDK_NGX_Parameter_DLSSD_ColorAfterFog_Subrect_Base_Y: &[u8; 35] =
    b"DLSSD.ColorAfterFog.Subrect.Base.Y\0";
pub const NVSDK_NGX_Parameter_DLSSD_ScreenSpaceSubsurfaceScatteringGuide_Subrect_Base_X: &[u8; 58] =
    b"DLSSD.ScreenSpaceSubsurfaceScatteringGuide.Subrect.Base.X\0";
pub const NVSDK_NGX_Parameter_DLSSD_ScreenSpaceSubsurfaceScatteringGuide_Subrect_Base_Y: &[u8; 58] =
    b"DLSSD.ScreenSpaceSubsurfaceScatteringGuide.Subrect.Base.Y\0";
pub const NVSDK_NGX_Parameter_DLSSD_ColorBeforeScreenSpaceSubsurfaceScattering_Subrect_Base_X:
    &[u8; 64] = b"DLSSD.ColorBeforeScreenSpaceSubsurfaceScattering.Subrect.Base.X\0";
pub const NVSDK_NGX_Parameter_DLSSD_ColorBeforeScreenSpaceSubsurfaceScattering_Subrect_Base_Y:
    &[u8; 64] = b"DLSSD.ColorBeforeScreenSpaceSubsurfaceScattering.Subrect.Base.Y\0";
pub const NVSDK_NGX_Parameter_DLSSD_ColorAfterScreenSpaceSubsurfaceScattering_Subrect_Base_X:
    &[u8; 63] = b"DLSSD.ColorAfterScreenSpaceSubsurfaceScattering.Subrect.Base.X\0";
pub const NVSDK_NGX_Parameter_DLSSD_ColorAfterScreenSpaceSubsurfaceScattering_Subrect_Base_Y:
    &[u8; 63] = b"DLSSD.ColorAfterScreenSpaceSubsurfaceScattering.Subrect.Base.Y\0";
pub const NVSDK_NGX_Parameter_DLSSD_ScreenSpaceRefractionGuide_Subrect_Base_X: &[u8; 48] =
    b"DLSSD.ScreenSpaceRefractionGuide.Subrect.Base.X\0";
pub const NVSDK_NGX_Parameter_DLSSD_ScreenSpaceRefractionGuide_Subrect_Base_Y: &[u8; 48] =
    b"DLSSD.ScreenSpaceRefractionGuide.Subrect.Base.Y\0";
pub const NVSDK_NGX_Parameter_DLSSD_ColorBeforeScreenSpaceRefraction_Subrect_Base_X: &[u8; 54] =
    b"DLSSD.ColorBeforeScreenSpaceRefraction.Subrect.Base.X\0";
pub const NVSDK_NGX_Parameter_DLSSD_ColorBeforeScreenSpaceRefraction_Subrect_Base_Y: &[u8; 54] =
    b"DLSSD.ColorBeforeScreenSpaceRefraction.Subrect.Base.Y\0";
pub const NVSDK_NGX_Parameter_DLSSD_ColorAfterScreenSpaceRefraction_Subrect_Base_X: &[u8; 53] =
    b"DLSSD.ColorAfterScreenSpaceRefraction.Subrect.Base.X\0";
pub const NVSDK_NGX_Parameter_DLSSD_ColorAfterScreenSpaceRefraction_Subrect_Base_Y: &[u8; 53] =
    b"DLSSD.ColorAfterScreenSpaceRefraction.Subrect.Base.Y\0";
pub const NVSDK_NGX_Parameter_DLSSD_DepthOfFieldGuide_Subrect_Base_X: &[u8; 39] =
    b"DLSSD.DepthOfFieldGuide.Subrect.Base.X\0";
pub const NVSDK_NGX_Parameter_DLSSD_DepthOfFieldGuide_Subrect_Base_Y: &[u8; 39] =
    b"DLSSD.DepthOfFieldGuide.Subrect.Base.Y\0";
pub const NVSDK_NGX_Parameter_DLSSD_ColorBeforeDepthOfField_Subrect_Base_X: &[u8; 45] =
    b"DLSSD.ColorBeforeDepthOfField.Subrect.Base.X\0";
pub const NVSDK_NGX_Parameter_DLSSD_ColorBeforeDepthOfField_Subrect_Base_Y: &[u8; 45] =
    b"DLSSD.ColorBeforeDepthOfField.Subrect.Base.Y\0";
pub const NVSDK_NGX_Parameter_DLSSD_ColorAfterDepthOfField_Subrect_Base_X: &[u8; 44] =
    b"DLSSD.ColorAfterDepthOfField.Subrect.Base.X\0";
pub const NVSDK_NGX_Parameter_DLSSD_ColorAfterDepthOfField_Subrect_Base_Y: &[u8; 44] =
    b"DLSSD.ColorAfterDepthOfField.Subrect.Base.Y\0";
pub const NVSDK_NGX_Parameter_DLSSD_DiffuseHitDistance_Subrect_Base_X: &[u8; 40] =
    b"DLSSD.DiffuseHitDistance.Subrect.Base.X\0";
pub const NVSDK_NGX_Parameter_DLSSD_DiffuseHitDistance_Subrect_Base_Y: &[u8; 40] =
    b"DLSSD.DiffuseHitDistance.Subrect.Base.Y\0";
pub const NVSDK_NGX_Parameter_DLSSD_SpecularHitDistance_Subrect_Base_X: &[u8; 41] =
    b"DLSSD.SpecularHitDistance.Subrect.Base.X\0";
pub const NVSDK_NGX_Parameter_DLSSD_SpecularHitDistance_Subrect_Base_Y: &[u8; 41] =
    b"DLSSD.SpecularHitDistance.Subrect.Base.Y\0";
pub const NVSDK_NGX_Parameter_DLSSD_DiffuseRayDirection_Subrect_Base_X: &[u8; 41] =
    b"DLSSD.DiffuseRayDirection.Subrect.Base.X\0";
pub const NVSDK_NGX_Parameter_DLSSD_DiffuseRayDirection_Subrect_Base_Y: &[u8; 41] =
    b"DLSSD.DiffuseRayDirection.Subrect.Base.Y\0";
pub const NVSDK_NGX_Parameter_DLSSD_SpecularRayDirection_Subrect_Base_X: &[u8; 42] =
    b"DLSSD.SpecularRayDirection.Subrect.Base.X\0";
pub const NVSDK_NGX_Parameter_DLSSD_SpecularRayDirection_Subrect_Base_Y: &[u8; 42] =
    b"DLSSD.SpecularRayDirection.Subrect.Base.Y\0";
pub const NVSDK_NGX_Parameter_DLSSD_DiffuseRayDirectionHitDistance_Subrect_Base_X: &[u8; 52] =
    b"DLSSD.DiffuseRayDirectionHitDistance.Subrect.Base.X\0";
pub const NVSDK_NGX_Parameter_DLSSD_DiffuseRayDirectionHitDistance_Subrect_Base_Y: &[u8; 52] =
    b"DLSSD.DiffuseRayDirectionHitDistance.Subrect.Base.Y\0";
pub const NVSDK_NGX_Parameter_DLSSD_SpecularRayDirectionHitDistance_Subrect_Base_X: &[u8; 53] =
    b"DLSSD.SpecularRayDirectionHitDistance.Subrect.Base.X\0";
pub const NVSDK_NGX_Parameter_DLSSD_SpecularRayDirectionHitDistance_Subrect_Base_Y: &[u8; 53] =
    b"DLSSD.SpecularRayDirectionHitDistance.Subrect.Base.Y\0";
pub const NVSDK_NGX_Parameter_SuperSamplingDenoising_Available: &[u8; 33] =
    b"SuperSamplingDenoising.Available\0";
pub const NVSDK_NGX_Parameter_SuperSamplingDenoising_NeedsUpdatedDriver: &[u8; 42] =
    b"SuperSamplingDenoising.NeedsUpdatedDriver\0";
pub const NVSDK_NGX_Parameter_SuperSamplingDenoising_MinDriverVersionMajor: &[u8; 45] =
    b"SuperSamplingDenoising.MinDriverVersionMajor\0";
pub const NVSDK_NGX_Parameter_SuperSamplingDenoising_MinDriverVersionMinor: &[u8; 45] =
    b"SuperSamplingDenoising.MinDriverVersionMinor\0";
pub const NVSDK_NGX_Parameter_SuperSamplingDenoising_FeatureInitResult: &[u8; 41] =
    b"SuperSamplingDenoising.FeatureInitResult\0";
pub const NVSDK_NGX_Parameter_DLSSDOptimalSettingsCallback: &[u8; 29] =
    b"DLSSDOptimalSettingsCallback\0";
pub const NVSDK_NGX_Parameter_DLSSDGetStatsCallback: &[u8; 22] = b"DLSSDGetStatsCallback\0";
pub const NVSDK_NGX_Parameter_RayReconstruction_Hint_Render_Preset_DLAA: &[u8; 42] =
    b"RayReconstruction.Hint.Render.Preset.DLAA\0";
pub const NVSDK_NGX_Parameter_RayReconstruction_Hint_Render_Preset_Quality: &[u8; 45] =
    b"RayReconstruction.Hint.Render.Preset.Quality\0";
pub const NVSDK_NGX_Parameter_RayReconstruction_Hint_Render_Preset_Balanced: &[u8; 46] =
    b"RayReconstruction.Hint.Render.Preset.Balanced\0";
pub const NVSDK_NGX_Parameter_RayReconstruction_Hint_Render_Preset_Performance: &[u8; 49] =
    b"RayReconstruction.Hint.Render.Preset.Performance\0";
pub const NVSDK_NGX_Parameter_RayReconstruction_Hint_Render_Preset_UltraPerformance: &[u8; 54] =
    b"RayReconstruction.Hint.Render.Preset.UltraPerformance\0";
pub const NVSDK_NGX_Parameter_RayReconstruction_Hint_Render_Preset_UltraQuality: &[u8; 50] =
    b"RayReconstruction.Hint.Render.Preset.UltraQuality\0";
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum NVSDK_NGX_DLSS_Hint_Render_Preset {
    NVSDK_NGX_DLSS_Hint_Render_Preset_Default = 0,
    NVSDK_NGX_DLSS_Hint_Render_Preset_A = 1,
    NVSDK_NGX_DLSS_Hint_Render_Preset_B = 2,
    NVSDK_NGX_DLSS_Hint_Render_Preset_C = 3,
    NVSDK_NGX_DLSS_Hint_Render_Preset_D = 4,
    NVSDK_NGX_DLSS_Hint_Render_Preset_E = 5,
    NVSDK_NGX_DLSS_Hint_Render_Preset_F = 6,
    NVSDK_NGX_DLSS_Hint_Render_Preset_G = 7,
    NVSDK_NGX_DLSS_Hint_Render_Preset_H_Reserved = 8,
    NVSDK_NGX_DLSS_Hint_Render_Preset_I_Reserved = 9,
    NVSDK_NGX_DLSS_Hint_Render_Preset_J = 10,
    NVSDK_NGX_DLSS_Hint_Render_Preset_K = 11,
    NVSDK_NGX_DLSS_Hint_Render_Preset_L = 12,
    NVSDK_NGX_DLSS_Hint_Render_Preset_M = 13,
    NVSDK_NGX_DLSS_Hint_Render_Preset_N = 14,
    NVSDK_NGX_DLSS_Hint_Render_Preset_O = 15,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVSDK_NGX_FeatureCommonInfo_Internal {
    _unused: [u8; 0],
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum NVSDK_NGX_Version {
    NVSDK_NGX_Version_API = 21,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum NVSDK_NGX_Result {
    NVSDK_NGX_Result_Success = 1,
    NVSDK_NGX_Result_Fail = 3134193664,
    NVSDK_NGX_Result_FAIL_FeatureNotSupported = 3134193665,
    NVSDK_NGX_Result_FAIL_PlatformError = 3134193666,
    NVSDK_NGX_Result_FAIL_FeatureAlreadyExists = 3134193667,
    NVSDK_NGX_Result_FAIL_FeatureNotFound = 3134193668,
    NVSDK_NGX_Result_FAIL_InvalidParameter = 3134193669,
    NVSDK_NGX_Result_FAIL_ScratchBufferTooSmall = 3134193670,
    NVSDK_NGX_Result_FAIL_NotInitialized = 3134193671,
    NVSDK_NGX_Result_FAIL_UnsupportedInputFormat = 3134193672,
    NVSDK_NGX_Result_FAIL_RWFlagMissing = 3134193673,
    NVSDK_NGX_Result_FAIL_MissingInput = 3134193674,
    NVSDK_NGX_Result_FAIL_UnableToInitializeFeature = 3134193675,
    NVSDK_NGX_Result_FAIL_OutOfDate = 3134193676,
    NVSDK_NGX_Result_FAIL_OutOfGPUMemory = 3134193677,
    NVSDK_NGX_Result_FAIL_UnsupportedFormat = 3134193678,
    NVSDK_NGX_Result_FAIL_UnableToWriteToAppDataPath = 3134193679,
    NVSDK_NGX_Result_FAIL_UnsupportedParameter = 3134193680,
    NVSDK_NGX_Result_FAIL_Denied = 3134193681,
    NVSDK_NGX_Result_FAIL_NotImplemented = 3134193682,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum NVSDK_NGX_Feature {
    NVSDK_NGX_Feature_Reserved0 = 0,
    NVSDK_NGX_Feature_SuperSampling = 1,
    NVSDK_NGX_Feature_InPainting = 2,
    NVSDK_NGX_Feature_ImageSuperResolution = 3,
    NVSDK_NGX_Feature_SlowMotion = 4,
    NVSDK_NGX_Feature_VideoSuperResolution = 5,
    NVSDK_NGX_Feature_Reserved1 = 6,
    NVSDK_NGX_Feature_Reserved2 = 7,
    NVSDK_NGX_Feature_Reserved3 = 8,
    NVSDK_NGX_Feature_ImageSignalProcessing = 9,
    NVSDK_NGX_Feature_DeepResolve = 10,
    NVSDK_NGX_Feature_FrameGeneration = 11,
    NVSDK_NGX_Feature_DeepDVC = 12,
    NVSDK_NGX_Feature_RayReconstruction = 13,
    NVSDK_NGX_Feature_Reserved14 = 14,
    NVSDK_NGX_Feature_Reserved15 = 15,
    NVSDK_NGX_Feature_Reserved16 = 16,
    NVSDK_NGX_Feature_Count = 17,
    NVSDK_NGX_Feature_Reserved_SDK = 32764,
    NVSDK_NGX_Feature_Reserved_Core = 32765,
    NVSDK_NGX_Feature_Reserved_Unknown = 32766,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum NVSDK_NGX_Buffer_Format {
    NVSDK_NGX_Buffer_Format_Unknown = 0,
    NVSDK_NGX_Buffer_Format_RGB8UI = 1,
    NVSDK_NGX_Buffer_Format_RGB16F = 2,
    NVSDK_NGX_Buffer_Format_RGB32F = 3,
    NVSDK_NGX_Buffer_Format_RGBA8UI = 4,
    NVSDK_NGX_Buffer_Format_RGBA16F = 5,
    NVSDK_NGX_Buffer_Format_RGBA32F = 6,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum NVSDK_NGX_PerfQuality_Value {
    NVSDK_NGX_PerfQuality_Value_MaxPerf = 0,
    NVSDK_NGX_PerfQuality_Value_Balanced = 1,
    NVSDK_NGX_PerfQuality_Value_MaxQuality = 2,
    NVSDK_NGX_PerfQuality_Value_UltraPerformance = 3,
    NVSDK_NGX_PerfQuality_Value_UltraQuality = 4,
    NVSDK_NGX_PerfQuality_Value_DLAA = 5,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum NVSDK_NGX_RTX_Value {
    NVSDK_NGX_RTX_Value_Off = 0,
    NVSDK_NGX_RTX_Value_On = 1,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum NVSDK_NGX_DLSS_Mode {
    NVSDK_NGX_DLSS_Mode_Off = 0,
    NVSDK_NGX_DLSS_Mode_DLSS_DLISP = 1,
    NVSDK_NGX_DLSS_Mode_DLISP_Only = 2,
    NVSDK_NGX_DLSS_Mode_DLSS = 3,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct NVSDK_NGX_Handle {
    pub Id: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_Handle() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_Handle> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_Handle>(),
        4usize,
        "Size of NVSDK_NGX_Handle"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_Handle>(),
        4usize,
        "Alignment of NVSDK_NGX_Handle"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Id) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_Handle::Id"
    );
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum NVSDK_NGX_GPU_Arch {
    NVSDK_NGX_GPU_Arch_NotSupported = 0,
    NVSDK_NGX_GPU_Arch_Volta = 320,
    NVSDK_NGX_GPU_Arch_Turing = 352,
    NVSDK_NGX_GPU_Arch_Ampere = 368,
    NVSDK_NGX_GPU_Arch_Ada = 400,
    NVSDK_NGX_GPU_Arch_Hopper = 384,
    NVSDK_NGX_GPU_Arch_Blackwell = 416,
    NVSDK_NGX_GPU_Arch_Blackwell2 = 432,
    NVSDK_NGX_GPU_Arch_Unknown = 134217727,
}
impl NVSDK_NGX_DLSS_Feature_Flags {
    pub const NVSDK_NGX_DLSS_Feature_Flags_IsInvalid: NVSDK_NGX_DLSS_Feature_Flags =
        NVSDK_NGX_DLSS_Feature_Flags(-2147483648);
    pub const NVSDK_NGX_DLSS_Feature_Flags_None: NVSDK_NGX_DLSS_Feature_Flags =
        NVSDK_NGX_DLSS_Feature_Flags(0);
    pub const NVSDK_NGX_DLSS_Feature_Flags_IsHDR: NVSDK_NGX_DLSS_Feature_Flags =
        NVSDK_NGX_DLSS_Feature_Flags(1);
    pub const NVSDK_NGX_DLSS_Feature_Flags_MVLowRes: NVSDK_NGX_DLSS_Feature_Flags =
        NVSDK_NGX_DLSS_Feature_Flags(2);
    pub const NVSDK_NGX_DLSS_Feature_Flags_MVJittered: NVSDK_NGX_DLSS_Feature_Flags =
        NVSDK_NGX_DLSS_Feature_Flags(4);
    pub const NVSDK_NGX_DLSS_Feature_Flags_DepthInverted: NVSDK_NGX_DLSS_Feature_Flags =
        NVSDK_NGX_DLSS_Feature_Flags(8);
    pub const NVSDK_NGX_DLSS_Feature_Flags_Reserved_0: NVSDK_NGX_DLSS_Feature_Flags =
        NVSDK_NGX_DLSS_Feature_Flags(16);
    pub const NVSDK_NGX_DLSS_Feature_Flags_DoSharpening: NVSDK_NGX_DLSS_Feature_Flags =
        NVSDK_NGX_DLSS_Feature_Flags(32);
    pub const NVSDK_NGX_DLSS_Feature_Flags_AutoExposure: NVSDK_NGX_DLSS_Feature_Flags =
        NVSDK_NGX_DLSS_Feature_Flags(64);
    pub const NVSDK_NGX_DLSS_Feature_Flags_AlphaUpscaling: NVSDK_NGX_DLSS_Feature_Flags =
        NVSDK_NGX_DLSS_Feature_Flags(128);
}
impl ::std::ops::BitOr<NVSDK_NGX_DLSS_Feature_Flags> for NVSDK_NGX_DLSS_Feature_Flags {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        NVSDK_NGX_DLSS_Feature_Flags(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for NVSDK_NGX_DLSS_Feature_Flags {
    #[inline]
    fn bitor_assign(&mut self, rhs: NVSDK_NGX_DLSS_Feature_Flags) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<NVSDK_NGX_DLSS_Feature_Flags> for NVSDK_NGX_DLSS_Feature_Flags {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        NVSDK_NGX_DLSS_Feature_Flags(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for NVSDK_NGX_DLSS_Feature_Flags {
    #[inline]
    fn bitand_assign(&mut self, rhs: NVSDK_NGX_DLSS_Feature_Flags) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct NVSDK_NGX_DLSS_Feature_Flags(pub ::std::os::raw::c_int);
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum NVSDK_NGX_ToneMapperType {
    NVSDK_NGX_TONEMAPPER_STRING = 0,
    NVSDK_NGX_TONEMAPPER_REINHARD = 1,
    NVSDK_NGX_TONEMAPPER_ONEOVERLUMA = 2,
    NVSDK_NGX_TONEMAPPER_ACES = 3,
    NVSDK_NGX_TONEMAPPERTYPE_NUM = 4,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum NVSDK_NGX_GBufferType {
    NVSDK_NGX_GBUFFER_ALBEDO = 0,
    NVSDK_NGX_GBUFFER_ROUGHNESS = 1,
    NVSDK_NGX_GBUFFER_METALLIC = 2,
    NVSDK_NGX_GBUFFER_SPECULAR = 3,
    NVSDK_NGX_GBUFFER_SUBSURFACE = 4,
    NVSDK_NGX_GBUFFER_NORMALS = 5,
    NVSDK_NGX_GBUFFER_SHADINGMODELID = 6,
    NVSDK_NGX_GBUFFER_MATERIALID = 7,
    NVSDK_NGX_GBUFFER_SPECULAR_ALBEDO = 8,
    NVSDK_NGX_GBUFFER_INDIRECT_ALBEDO = 9,
    NVSDK_NGX_GBUFFER_SPECULAR_MVEC = 10,
    NVSDK_NGX_GBUFFER_DISOCCL_MASK = 11,
    NVSDK_NGX_GBUFFER_EMISSIVE = 12,
    NVSDK_NGX_GBUFFERTYPE_NUM = 16,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct NVSDK_NGX_Coordinates {
    pub X: ::std::os::raw::c_uint,
    pub Y: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_Coordinates() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_Coordinates> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_Coordinates>(),
        8usize,
        "Size of NVSDK_NGX_Coordinates"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_Coordinates>(),
        4usize,
        "Alignment of NVSDK_NGX_Coordinates"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).X) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_Coordinates::X"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Y) as usize - ptr as usize },
        4usize,
        "Offset of field: NVSDK_NGX_Coordinates::Y"
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct NVSDK_NGX_Dimensions {
    pub Width: ::std::os::raw::c_uint,
    pub Height: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_Dimensions() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_Dimensions> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_Dimensions>(),
        8usize,
        "Size of NVSDK_NGX_Dimensions"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_Dimensions>(),
        4usize,
        "Alignment of NVSDK_NGX_Dimensions"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Width) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_Dimensions::Width"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Height) as usize - ptr as usize },
        4usize,
        "Offset of field: NVSDK_NGX_Dimensions::Height"
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct NVSDK_NGX_PrecisionInfo {
    pub IsLowPrecision: ::std::os::raw::c_uint,
    pub Bias: f32,
    pub Scale: f32,
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_PrecisionInfo() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_PrecisionInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_PrecisionInfo>(),
        12usize,
        "Size of NVSDK_NGX_PrecisionInfo"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_PrecisionInfo>(),
        4usize,
        "Alignment of NVSDK_NGX_PrecisionInfo"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsLowPrecision) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_PrecisionInfo::IsLowPrecision"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Bias) as usize - ptr as usize },
        4usize,
        "Offset of field: NVSDK_NGX_PrecisionInfo::Bias"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Scale) as usize - ptr as usize },
        8usize,
        "Offset of field: NVSDK_NGX_PrecisionInfo::Scale"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVSDK_NGX_PathListInfo {
    pub Path: *const *const wchar_t,
    pub Length: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_PathListInfo() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_PathListInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_PathListInfo>(),
        16usize,
        "Size of NVSDK_NGX_PathListInfo"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_PathListInfo>(),
        8usize,
        "Alignment of NVSDK_NGX_PathListInfo"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Path) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_PathListInfo::Path"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Length) as usize - ptr as usize },
        8usize,
        "Offset of field: NVSDK_NGX_PathListInfo::Length"
    );
}
impl Default for NVSDK_NGX_PathListInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum NVSDK_NGX_Logging_Level {
    NVSDK_NGX_LOGGING_LEVEL_OFF = 0,
    NVSDK_NGX_LOGGING_LEVEL_ON = 1,
    NVSDK_NGX_LOGGING_LEVEL_VERBOSE = 2,
    NVSDK_NGX_LOGGING_LEVEL_NUM = 3,
}
pub type NVSDK_NGX_AppLogCallback = ::std::option::Option<
    unsafe extern "C" fn(
        message: *const ::std::os::raw::c_char,
        loggingLevel: NVSDK_NGX_Logging_Level,
        sourceComponent: NVSDK_NGX_Feature,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVSDK_NGX_LoggingInfo {
    pub LoggingCallback: NVSDK_NGX_AppLogCallback,
    pub MinimumLoggingLevel: NVSDK_NGX_Logging_Level,
    pub DisableOtherLoggingSinks: bool,
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_LoggingInfo() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_LoggingInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_LoggingInfo>(),
        16usize,
        "Size of NVSDK_NGX_LoggingInfo"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_LoggingInfo>(),
        8usize,
        "Alignment of NVSDK_NGX_LoggingInfo"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LoggingCallback) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_LoggingInfo::LoggingCallback"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MinimumLoggingLevel) as usize - ptr as usize },
        8usize,
        "Offset of field: NVSDK_NGX_LoggingInfo::MinimumLoggingLevel"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DisableOtherLoggingSinks) as usize - ptr as usize },
        12usize,
        "Offset of field: NVSDK_NGX_LoggingInfo::DisableOtherLoggingSinks"
    );
}
impl Default for NVSDK_NGX_LoggingInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVSDK_NGX_FeatureCommonInfo {
    pub PathListInfo: NVSDK_NGX_PathListInfo,
    pub InternalData: *mut NVSDK_NGX_FeatureCommonInfo_Internal,
    pub LoggingInfo: NVSDK_NGX_LoggingInfo,
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_FeatureCommonInfo() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_FeatureCommonInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_FeatureCommonInfo>(),
        40usize,
        "Size of NVSDK_NGX_FeatureCommonInfo"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_FeatureCommonInfo>(),
        8usize,
        "Alignment of NVSDK_NGX_FeatureCommonInfo"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PathListInfo) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_FeatureCommonInfo::PathListInfo"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InternalData) as usize - ptr as usize },
        16usize,
        "Offset of field: NVSDK_NGX_FeatureCommonInfo::InternalData"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LoggingInfo) as usize - ptr as usize },
        24usize,
        "Offset of field: NVSDK_NGX_FeatureCommonInfo::LoggingInfo"
    );
}
impl Default for NVSDK_NGX_FeatureCommonInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum NVSDK_NGX_Resource_VK_Type {
    NVSDK_NGX_RESOURCE_VK_TYPE_VK_IMAGEVIEW = 0,
    NVSDK_NGX_RESOURCE_VK_TYPE_VK_BUFFER = 1,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum NVSDK_NGX_Opt_Level {
    NVSDK_NGX_OPT_LEVEL_UNDEFINED = 0,
    NVSDK_NGX_OPT_LEVEL_DEBUG = 20,
    NVSDK_NGX_OPT_LEVEL_DEVELOP = 30,
    NVSDK_NGX_OPT_LEVEL_RELEASE = 40,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum NVSDK_NGX_EngineType {
    NVSDK_NGX_ENGINE_TYPE_CUSTOM = 0,
    NVSDK_NGX_ENGINE_TYPE_UNREAL = 1,
    NVSDK_NGX_ENGINE_TYPE_UNITY = 2,
    NVSDK_NGX_ENGINE_TYPE_OMNIVERSE = 3,
    NVSDK_NGX_ENGINE_COUNT = 4,
}
impl NVSDK_NGX_Feature_Support_Result {
    pub const NVSDK_NGX_FeatureSupportResult_Supported: NVSDK_NGX_Feature_Support_Result =
        NVSDK_NGX_Feature_Support_Result(0);
    pub const NVSDK_NGX_FeatureSupportResult_CheckNotPresent: NVSDK_NGX_Feature_Support_Result =
        NVSDK_NGX_Feature_Support_Result(1);
    pub const NVSDK_NGX_FeatureSupportResult_DriverVersionUnsupported:
        NVSDK_NGX_Feature_Support_Result = NVSDK_NGX_Feature_Support_Result(2);
    pub const NVSDK_NGX_FeatureSupportResult_AdapterUnsupported: NVSDK_NGX_Feature_Support_Result =
        NVSDK_NGX_Feature_Support_Result(4);
    pub const NVSDK_NGX_FeatureSupportResult_OSVersionBelowMinimumSupported:
        NVSDK_NGX_Feature_Support_Result = NVSDK_NGX_Feature_Support_Result(8);
    pub const NVSDK_NGX_FeatureSupportResult_NotImplemented: NVSDK_NGX_Feature_Support_Result =
        NVSDK_NGX_Feature_Support_Result(16);
}
impl ::std::ops::BitOr<NVSDK_NGX_Feature_Support_Result> for NVSDK_NGX_Feature_Support_Result {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        NVSDK_NGX_Feature_Support_Result(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for NVSDK_NGX_Feature_Support_Result {
    #[inline]
    fn bitor_assign(&mut self, rhs: NVSDK_NGX_Feature_Support_Result) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<NVSDK_NGX_Feature_Support_Result> for NVSDK_NGX_Feature_Support_Result {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        NVSDK_NGX_Feature_Support_Result(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for NVSDK_NGX_Feature_Support_Result {
    #[inline]
    fn bitand_assign(&mut self, rhs: NVSDK_NGX_Feature_Support_Result) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct NVSDK_NGX_Feature_Support_Result(pub ::std::os::raw::c_uint);
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum NVSDK_NGX_Application_Identifier_Type {
    NVSDK_NGX_Application_Identifier_Type_Application_Id = 0,
    NVSDK_NGX_Application_Identifier_Type_Project_Id = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVSDK_NGX_ProjectIdDescription {
    pub ProjectId: *const ::std::os::raw::c_char,
    pub EngineType: NVSDK_NGX_EngineType,
    pub EngineVersion: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_ProjectIdDescription() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_ProjectIdDescription> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_ProjectIdDescription>(),
        24usize,
        "Size of NVSDK_NGX_ProjectIdDescription"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_ProjectIdDescription>(),
        8usize,
        "Alignment of NVSDK_NGX_ProjectIdDescription"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ProjectId) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_ProjectIdDescription::ProjectId"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EngineType) as usize - ptr as usize },
        8usize,
        "Offset of field: NVSDK_NGX_ProjectIdDescription::EngineType"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EngineVersion) as usize - ptr as usize },
        16usize,
        "Offset of field: NVSDK_NGX_ProjectIdDescription::EngineVersion"
    );
}
impl Default for NVSDK_NGX_ProjectIdDescription {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct NVSDK_NGX_Application_Identifier {
    pub IdentifierType: NVSDK_NGX_Application_Identifier_Type,
    pub v: v,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v {
    pub ProjectDesc: NVSDK_NGX_ProjectIdDescription,
    pub ApplicationId: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_v() {
    const UNINIT: ::std::mem::MaybeUninit<v> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<v>(), 24usize, "Size of v");
    assert_eq!(::std::mem::align_of::<v>(), 8usize, "Alignment of v");
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ProjectDesc) as usize - ptr as usize },
        0usize,
        "Offset of field: v::ProjectDesc"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ApplicationId) as usize - ptr as usize },
        0usize,
        "Offset of field: v::ApplicationId"
    );
}
impl Default for v {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for v {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "v {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_Application_Identifier() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_Application_Identifier> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_Application_Identifier>(),
        32usize,
        "Size of NVSDK_NGX_Application_Identifier"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_Application_Identifier>(),
        8usize,
        "Alignment of NVSDK_NGX_Application_Identifier"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IdentifierType) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_Application_Identifier::IdentifierType"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        8usize,
        "Offset of field: NVSDK_NGX_Application_Identifier::v"
    );
}
impl Default for NVSDK_NGX_Application_Identifier {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for NVSDK_NGX_Application_Identifier {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "NVSDK_NGX_Application_Identifier {{ IdentifierType: {:?}, v: {:?} }}",
            self.IdentifierType, self.v
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct NVSDK_NGX_FeatureDiscoveryInfo {
    pub SDKVersion: NVSDK_NGX_Version,
    pub FeatureID: NVSDK_NGX_Feature,
    pub Identifier: NVSDK_NGX_Application_Identifier,
    pub ApplicationDataPath: *const wchar_t,
    pub FeatureInfo: *const NVSDK_NGX_FeatureCommonInfo,
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_FeatureDiscoveryInfo() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_FeatureDiscoveryInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_FeatureDiscoveryInfo>(),
        56usize,
        "Size of NVSDK_NGX_FeatureDiscoveryInfo"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_FeatureDiscoveryInfo>(),
        8usize,
        "Alignment of NVSDK_NGX_FeatureDiscoveryInfo"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SDKVersion) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_FeatureDiscoveryInfo::SDKVersion"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FeatureID) as usize - ptr as usize },
        4usize,
        "Offset of field: NVSDK_NGX_FeatureDiscoveryInfo::FeatureID"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Identifier) as usize - ptr as usize },
        8usize,
        "Offset of field: NVSDK_NGX_FeatureDiscoveryInfo::Identifier"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ApplicationDataPath) as usize - ptr as usize },
        40usize,
        "Offset of field: NVSDK_NGX_FeatureDiscoveryInfo::ApplicationDataPath"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FeatureInfo) as usize - ptr as usize },
        48usize,
        "Offset of field: NVSDK_NGX_FeatureDiscoveryInfo::FeatureInfo"
    );
}
impl Default for NVSDK_NGX_FeatureDiscoveryInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for NVSDK_NGX_FeatureDiscoveryInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "NVSDK_NGX_FeatureDiscoveryInfo {{ SDKVersion: {:?}, FeatureID: {:?}, Identifier: {:?}, ApplicationDataPath: {:?}, FeatureInfo: {:?} }}" , self . SDKVersion , self . FeatureID , self . Identifier , self . ApplicationDataPath , self . FeatureInfo)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVSDK_NGX_FeatureRequirement {
    pub FeatureSupported: NVSDK_NGX_Feature_Support_Result,
    pub MinHWArchitecture: ::std::os::raw::c_uint,
    pub MinOSVersion: [::std::os::raw::c_char; 255usize],
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_FeatureRequirement() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_FeatureRequirement> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_FeatureRequirement>(),
        264usize,
        "Size of NVSDK_NGX_FeatureRequirement"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_FeatureRequirement>(),
        4usize,
        "Alignment of NVSDK_NGX_FeatureRequirement"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FeatureSupported) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_FeatureRequirement::FeatureSupported"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MinHWArchitecture) as usize - ptr as usize },
        4usize,
        "Offset of field: NVSDK_NGX_FeatureRequirement::MinHWArchitecture"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MinOSVersion) as usize - ptr as usize },
        8usize,
        "Offset of field: NVSDK_NGX_FeatureRequirement::MinOSVersion"
    );
}
impl Default for NVSDK_NGX_FeatureRequirement {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D11Resource {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D12Resource {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVSDK_NGX_Feature_Create_Params {
    pub InWidth: ::std::os::raw::c_uint,
    pub InHeight: ::std::os::raw::c_uint,
    pub InTargetWidth: ::std::os::raw::c_uint,
    pub InTargetHeight: ::std::os::raw::c_uint,
    #[doc = " OPTIONAL"]
    pub InPerfQualityValue: NVSDK_NGX_PerfQuality_Value,
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_Feature_Create_Params() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_Feature_Create_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_Feature_Create_Params>(),
        20usize,
        "Size of NVSDK_NGX_Feature_Create_Params"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_Feature_Create_Params>(),
        4usize,
        "Alignment of NVSDK_NGX_Feature_Create_Params"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InWidth) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_Feature_Create_Params::InWidth"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InHeight) as usize - ptr as usize },
        4usize,
        "Offset of field: NVSDK_NGX_Feature_Create_Params::InHeight"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InTargetWidth) as usize - ptr as usize },
        8usize,
        "Offset of field: NVSDK_NGX_Feature_Create_Params::InTargetWidth"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InTargetHeight) as usize - ptr as usize },
        12usize,
        "Offset of field: NVSDK_NGX_Feature_Create_Params::InTargetHeight"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InPerfQualityValue) as usize - ptr as usize },
        16usize,
        "Offset of field: NVSDK_NGX_Feature_Create_Params::InPerfQualityValue"
    );
}
impl Default for NVSDK_NGX_Feature_Create_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVSDK_NGX_DLSS_Create_Params {
    pub Feature: NVSDK_NGX_Feature_Create_Params,
    #[doc = " OPTIONAL"]
    pub InFeatureCreateFlags: ::std::os::raw::c_int,
    pub InEnableOutputSubrects: bool,
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_DLSS_Create_Params() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_DLSS_Create_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_DLSS_Create_Params>(),
        28usize,
        "Size of NVSDK_NGX_DLSS_Create_Params"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_DLSS_Create_Params>(),
        4usize,
        "Alignment of NVSDK_NGX_DLSS_Create_Params"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Feature) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_DLSS_Create_Params::Feature"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InFeatureCreateFlags) as usize - ptr as usize },
        20usize,
        "Offset of field: NVSDK_NGX_DLSS_Create_Params::InFeatureCreateFlags"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InEnableOutputSubrects) as usize - ptr as usize },
        24usize,
        "Offset of field: NVSDK_NGX_DLSS_Create_Params::InEnableOutputSubrects"
    );
}
impl Default for NVSDK_NGX_DLSS_Create_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVSDK_NGX_DLDenoise_Create_Params {
    pub Feature: NVSDK_NGX_Feature_Create_Params,
    #[doc = " OPTIONAL"]
    pub InFeatureCreateFlags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_DLDenoise_Create_Params() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_DLDenoise_Create_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_DLDenoise_Create_Params>(),
        24usize,
        "Size of NVSDK_NGX_DLDenoise_Create_Params"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_DLDenoise_Create_Params>(),
        4usize,
        "Alignment of NVSDK_NGX_DLDenoise_Create_Params"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Feature) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_DLDenoise_Create_Params::Feature"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InFeatureCreateFlags) as usize - ptr as usize },
        20usize,
        "Offset of field: NVSDK_NGX_DLDenoise_Create_Params::InFeatureCreateFlags"
    );
}
impl Default for NVSDK_NGX_DLDenoise_Create_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVSDK_NGX_Parameter {
    _unused: [u8; 0],
}
extern "C" {
    pub fn NVSDK_NGX_Parameter_SetULL(
        InParameter: *mut NVSDK_NGX_Parameter,
        InName: *const ::std::os::raw::c_char,
        InValue: ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    pub fn NVSDK_NGX_Parameter_SetF(
        InParameter: *mut NVSDK_NGX_Parameter,
        InName: *const ::std::os::raw::c_char,
        InValue: f32,
    );
}
extern "C" {
    pub fn NVSDK_NGX_Parameter_SetD(
        InParameter: *mut NVSDK_NGX_Parameter,
        InName: *const ::std::os::raw::c_char,
        InValue: f64,
    );
}
extern "C" {
    pub fn NVSDK_NGX_Parameter_SetUI(
        InParameter: *mut NVSDK_NGX_Parameter,
        InName: *const ::std::os::raw::c_char,
        InValue: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn NVSDK_NGX_Parameter_SetI(
        InParameter: *mut NVSDK_NGX_Parameter,
        InName: *const ::std::os::raw::c_char,
        InValue: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn NVSDK_NGX_Parameter_SetD3d11Resource(
        InParameter: *mut NVSDK_NGX_Parameter,
        InName: *const ::std::os::raw::c_char,
        InValue: *mut ID3D11Resource,
    );
}
extern "C" {
    pub fn NVSDK_NGX_Parameter_SetD3d12Resource(
        InParameter: *mut NVSDK_NGX_Parameter,
        InName: *const ::std::os::raw::c_char,
        InValue: *mut ID3D12Resource,
    );
}
extern "C" {
    pub fn NVSDK_NGX_Parameter_SetVoidPointer(
        InParameter: *mut NVSDK_NGX_Parameter,
        InName: *const ::std::os::raw::c_char,
        InValue: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn NVSDK_NGX_Parameter_GetULL(
        InParameter: *mut NVSDK_NGX_Parameter,
        InName: *const ::std::os::raw::c_char,
        OutValue: *mut ::std::os::raw::c_ulonglong,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_Parameter_GetF(
        InParameter: *mut NVSDK_NGX_Parameter,
        InName: *const ::std::os::raw::c_char,
        OutValue: *mut f32,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_Parameter_GetD(
        InParameter: *mut NVSDK_NGX_Parameter,
        InName: *const ::std::os::raw::c_char,
        OutValue: *mut f64,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_Parameter_GetUI(
        InParameter: *mut NVSDK_NGX_Parameter,
        InName: *const ::std::os::raw::c_char,
        OutValue: *mut ::std::os::raw::c_uint,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_Parameter_GetI(
        InParameter: *mut NVSDK_NGX_Parameter,
        InName: *const ::std::os::raw::c_char,
        OutValue: *mut ::std::os::raw::c_int,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_Parameter_GetD3d11Resource(
        InParameter: *mut NVSDK_NGX_Parameter,
        InName: *const ::std::os::raw::c_char,
        OutValue: *mut *mut ID3D11Resource,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_Parameter_GetD3d12Resource(
        InParameter: *mut NVSDK_NGX_Parameter,
        InName: *const ::std::os::raw::c_char,
        OutValue: *mut *mut ID3D12Resource,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_Parameter_GetVoidPointer(
        InParameter: *mut NVSDK_NGX_Parameter,
        InName: *const ::std::os::raw::c_char,
        OutValue: *mut *mut ::std::os::raw::c_void,
    ) -> NVSDK_NGX_Result;
}
#[repr(C)]
pub struct NVSDK_NGX_ImageViewInfo_VK {
    pub ImageView: VkImageView,
    pub Image: VkImage,
    pub SubresourceRange: VkImageSubresourceRange,
    pub Format: VkFormat,
    pub Width: ::std::os::raw::c_uint,
    pub Height: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_ImageViewInfo_VK() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_ImageViewInfo_VK> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_ImageViewInfo_VK>(),
        48usize,
        "Size of NVSDK_NGX_ImageViewInfo_VK"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_ImageViewInfo_VK>(),
        8usize,
        "Alignment of NVSDK_NGX_ImageViewInfo_VK"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ImageView) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_ImageViewInfo_VK::ImageView"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Image) as usize - ptr as usize },
        8usize,
        "Offset of field: NVSDK_NGX_ImageViewInfo_VK::Image"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SubresourceRange) as usize - ptr as usize },
        16usize,
        "Offset of field: NVSDK_NGX_ImageViewInfo_VK::SubresourceRange"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Format) as usize - ptr as usize },
        36usize,
        "Offset of field: NVSDK_NGX_ImageViewInfo_VK::Format"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Width) as usize - ptr as usize },
        40usize,
        "Offset of field: NVSDK_NGX_ImageViewInfo_VK::Width"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Height) as usize - ptr as usize },
        44usize,
        "Offset of field: NVSDK_NGX_ImageViewInfo_VK::Height"
    );
}
impl Default for NVSDK_NGX_ImageViewInfo_VK {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for NVSDK_NGX_ImageViewInfo_VK {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "NVSDK_NGX_ImageViewInfo_VK {{ Width: {:?}, Height: {:?} }}",
            self.Width, self.Height
        )
    }
}
#[repr(C)]
pub struct NVSDK_NGX_BufferInfo_VK {
    pub Buffer: VkBuffer,
    pub SizeInBytes: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_BufferInfo_VK() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_BufferInfo_VK> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_BufferInfo_VK>(),
        16usize,
        "Size of NVSDK_NGX_BufferInfo_VK"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_BufferInfo_VK>(),
        8usize,
        "Alignment of NVSDK_NGX_BufferInfo_VK"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Buffer) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_BufferInfo_VK::Buffer"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeInBytes) as usize - ptr as usize },
        8usize,
        "Offset of field: NVSDK_NGX_BufferInfo_VK::SizeInBytes"
    );
}
impl Default for NVSDK_NGX_BufferInfo_VK {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for NVSDK_NGX_BufferInfo_VK {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "NVSDK_NGX_BufferInfo_VK {{ SizeInBytes: {:?} }}",
            self.SizeInBytes
        )
    }
}
#[repr(C)]
pub struct NVSDK_NGX_Resource_VK {
    pub Resource: NVSDK_NGX_Resource_VK__bindgen_ty_1,
    pub Type: NVSDK_NGX_Resource_VK_Type,
    pub ReadWrite: bool,
}
#[repr(C)]
pub struct NVSDK_NGX_Resource_VK__bindgen_ty_1 {
    pub ImageViewInfo: __BindgenUnionField<NVSDK_NGX_ImageViewInfo_VK>,
    pub BufferInfo: __BindgenUnionField<NVSDK_NGX_BufferInfo_VK>,
    pub bindgen_union_field: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_Resource_VK__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_Resource_VK__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_Resource_VK__bindgen_ty_1>(),
        48usize,
        "Size of NVSDK_NGX_Resource_VK__bindgen_ty_1"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_Resource_VK__bindgen_ty_1>(),
        8usize,
        "Alignment of NVSDK_NGX_Resource_VK__bindgen_ty_1"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ImageViewInfo) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_Resource_VK__bindgen_ty_1::ImageViewInfo"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BufferInfo) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_Resource_VK__bindgen_ty_1::BufferInfo"
    );
}
impl Default for NVSDK_NGX_Resource_VK__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for NVSDK_NGX_Resource_VK__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "NVSDK_NGX_Resource_VK__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_Resource_VK() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_Resource_VK> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_Resource_VK>(),
        56usize,
        "Size of NVSDK_NGX_Resource_VK"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_Resource_VK>(),
        8usize,
        "Alignment of NVSDK_NGX_Resource_VK"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Resource) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_Resource_VK::Resource"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
        48usize,
        "Offset of field: NVSDK_NGX_Resource_VK::Type"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadWrite) as usize - ptr as usize },
        52usize,
        "Offset of field: NVSDK_NGX_Resource_VK::ReadWrite"
    );
}
impl Default for NVSDK_NGX_Resource_VK {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for NVSDK_NGX_Resource_VK {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "NVSDK_NGX_Resource_VK {{ Resource: {:?}, Type: {:?}, ReadWrite: {:?} }}",
            self.Resource, self.Type, self.ReadWrite
        )
    }
}
extern "C" {
    pub fn NVSDK_NGX_VULKAN_RequiredExtensions(
        OutInstanceExtCount: *mut ::std::os::raw::c_uint,
        OutInstanceExts: *mut *mut *const ::std::os::raw::c_char,
        OutDeviceExtCount: *mut ::std::os::raw::c_uint,
        OutDeviceExts: *mut *mut *const ::std::os::raw::c_char,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_VULKAN_Init(
        InApplicationId: ::std::os::raw::c_ulonglong,
        InApplicationDataPath: *const wchar_t,
        InInstance: VkInstance,
        InPD: VkPhysicalDevice,
        InDevice: VkDevice,
        InGIPA: PFN_vkGetInstanceProcAddr,
        InGDPA: PFN_vkGetDeviceProcAddr,
        InFeatureInfo: *const NVSDK_NGX_FeatureCommonInfo,
        InSDKVersion: NVSDK_NGX_Version,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_VULKAN_Init_with_ProjectID(
        InProjectId: *const ::std::os::raw::c_char,
        InEngineType: NVSDK_NGX_EngineType,
        InEngineVersion: *const ::std::os::raw::c_char,
        InApplicationDataPath: *const wchar_t,
        InInstance: VkInstance,
        InPD: VkPhysicalDevice,
        InDevice: VkDevice,
        InGIPA: PFN_vkGetInstanceProcAddr,
        InGDPA: PFN_vkGetDeviceProcAddr,
        InFeatureInfo: *const NVSDK_NGX_FeatureCommonInfo,
        InSDKVersion: NVSDK_NGX_Version,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_VULKAN_Shutdown1(InDevice: VkDevice) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_VULKAN_AllocateParameters(
        OutParameters: *mut *mut NVSDK_NGX_Parameter,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_VULKAN_GetCapabilityParameters(
        OutParameters: *mut *mut NVSDK_NGX_Parameter,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_VULKAN_DestroyParameters(
        InParameters: *mut NVSDK_NGX_Parameter,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_VULKAN_GetScratchBufferSize(
        InFeatureId: NVSDK_NGX_Feature,
        InParameters: *const NVSDK_NGX_Parameter,
        OutSizeInBytes: *mut usize,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_VULKAN_CreateFeature(
        InCmdBuffer: VkCommandBuffer,
        InFeatureID: NVSDK_NGX_Feature,
        InParameters: *mut NVSDK_NGX_Parameter,
        OutHandle: *mut *mut NVSDK_NGX_Handle,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_VULKAN_CreateFeature1(
        InDevice: VkDevice,
        InCmdList: VkCommandBuffer,
        InFeatureID: NVSDK_NGX_Feature,
        InParameters: *mut NVSDK_NGX_Parameter,
        OutHandle: *mut *mut NVSDK_NGX_Handle,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_VULKAN_ReleaseFeature(InHandle: *mut NVSDK_NGX_Handle) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_VULKAN_GetFeatureRequirements(
        Instance: VkInstance,
        PhysicalDevice: VkPhysicalDevice,
        FeatureDiscoveryInfo: *const NVSDK_NGX_FeatureDiscoveryInfo,
        OutSupported: *mut NVSDK_NGX_FeatureRequirement,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_VULKAN_GetFeatureInstanceExtensionRequirements(
        FeatureDiscoveryInfo: *const NVSDK_NGX_FeatureDiscoveryInfo,
        OutExtensionCount: *mut u32,
        OutExtensionProperties: *mut *mut VkExtensionProperties,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_VULKAN_GetFeatureDeviceExtensionRequirements(
        Instance: VkInstance,
        PhysicalDevice: VkPhysicalDevice,
        FeatureDiscoveryInfo: *const NVSDK_NGX_FeatureDiscoveryInfo,
        OutExtensionCount: *mut u32,
        OutExtensionProperties: *mut *mut VkExtensionProperties,
    ) -> NVSDK_NGX_Result;
}
pub type PFN_NVSDK_NGX_ProgressCallback_C =
    ::std::option::Option<unsafe extern "C" fn(InCurrentProgress: f32, OutShouldCancel: *mut bool)>;
extern "C" {
    pub fn NVSDK_NGX_VULKAN_EvaluateFeature_C(
        InCmdList: VkCommandBuffer,
        InFeatureHandle: *const NVSDK_NGX_Handle,
        InParameters: *const NVSDK_NGX_Parameter,
        InCallback: PFN_NVSDK_NGX_ProgressCallback_C,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn GetNGXResultAsString(InNGXResult: NVSDK_NGX_Result) -> *const wchar_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IDXGIAdapter {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D11Device {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D11DeviceContext {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D12Device {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D12GraphicsCommandList {
    _unused: [u8; 0],
}
pub type CUtexObject = ::std::os::raw::c_ulonglong;
extern "C" {
    pub fn NVSDK_NGX_D3D11_Init(
        InApplicationId: ::std::os::raw::c_ulonglong,
        InApplicationDataPath: *const wchar_t,
        InDevice: *mut ID3D11Device,
        InFeatureInfo: *const NVSDK_NGX_FeatureCommonInfo,
        InSDKVersion: NVSDK_NGX_Version,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_D3D12_Init(
        InApplicationId: ::std::os::raw::c_ulonglong,
        InApplicationDataPath: *const wchar_t,
        InDevice: *mut ID3D12Device,
        InFeatureInfo: *const NVSDK_NGX_FeatureCommonInfo,
        InSDKVersion: NVSDK_NGX_Version,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_CUDA_Init(
        InApplicationId: ::std::os::raw::c_ulonglong,
        InApplicationDataPath: *const wchar_t,
        InFeatureInfo: *const NVSDK_NGX_FeatureCommonInfo,
        InSDKVersion: NVSDK_NGX_Version,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_D3D11_Init_with_ProjectID(
        InProjectId: *const ::std::os::raw::c_char,
        InEngineType: NVSDK_NGX_EngineType,
        InEngineVersion: *const ::std::os::raw::c_char,
        InApplicationDataPath: *const wchar_t,
        InDevice: *mut ID3D11Device,
        InFeatureInfo: *const NVSDK_NGX_FeatureCommonInfo,
        InSDKVersion: NVSDK_NGX_Version,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_D3D12_Init_with_ProjectID(
        InProjectId: *const ::std::os::raw::c_char,
        InEngineType: NVSDK_NGX_EngineType,
        InEngineVersion: *const ::std::os::raw::c_char,
        InApplicationDataPath: *const wchar_t,
        InDevice: *mut ID3D12Device,
        InFeatureInfo: *const NVSDK_NGX_FeatureCommonInfo,
        InSDKVersion: NVSDK_NGX_Version,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_CUDA_Init_with_ProjectID(
        InProjectId: *const ::std::os::raw::c_char,
        InEngineType: NVSDK_NGX_EngineType,
        InEngineVersion: *const ::std::os::raw::c_char,
        InApplicationDataPath: *const wchar_t,
        InFeatureInfo: *const NVSDK_NGX_FeatureCommonInfo,
        InSDKVersion: NVSDK_NGX_Version,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_D3D11_Shutdown1(InDevice: *mut ID3D11Device) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_D3D12_Shutdown1(InDevice: *mut ID3D12Device) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_CUDA_Shutdown() -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_D3D11_AllocateParameters(
        OutParameters: *mut *mut NVSDK_NGX_Parameter,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_D3D12_AllocateParameters(
        OutParameters: *mut *mut NVSDK_NGX_Parameter,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_CUDA_AllocateParameters(
        OutParameters: *mut *mut NVSDK_NGX_Parameter,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_D3D11_GetCapabilityParameters(
        OutParameters: *mut *mut NVSDK_NGX_Parameter,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_D3D12_GetCapabilityParameters(
        OutParameters: *mut *mut NVSDK_NGX_Parameter,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_CUDA_GetCapabilityParameters(
        OutParameters: *mut *mut NVSDK_NGX_Parameter,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_D3D11_DestroyParameters(
        InParameters: *mut NVSDK_NGX_Parameter,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_D3D12_DestroyParameters(
        InParameters: *mut NVSDK_NGX_Parameter,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_CUDA_DestroyParameters(
        InParameters: *mut NVSDK_NGX_Parameter,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_D3D11_GetScratchBufferSize(
        InFeatureId: NVSDK_NGX_Feature,
        InParameters: *const NVSDK_NGX_Parameter,
        OutSizeInBytes: *mut usize,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_D3D12_GetScratchBufferSize(
        InFeatureId: NVSDK_NGX_Feature,
        InParameters: *const NVSDK_NGX_Parameter,
        OutSizeInBytes: *mut usize,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_CUDA_GetScratchBufferSize(
        InFeatureId: NVSDK_NGX_Feature,
        InParameters: *const NVSDK_NGX_Parameter,
        OutSizeInBytes: *mut usize,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_D3D11_CreateFeature(
        InDevCtx: *mut ID3D11DeviceContext,
        InFeatureID: NVSDK_NGX_Feature,
        InParameters: *mut NVSDK_NGX_Parameter,
        OutHandle: *mut *mut NVSDK_NGX_Handle,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_D3D12_CreateFeature(
        InCmdList: *mut ID3D12GraphicsCommandList,
        InFeatureID: NVSDK_NGX_Feature,
        InParameters: *mut NVSDK_NGX_Parameter,
        OutHandle: *mut *mut NVSDK_NGX_Handle,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_CUDA_CreateFeature(
        InFeatureID: NVSDK_NGX_Feature,
        InParameters: *const NVSDK_NGX_Parameter,
        OutHandle: *mut *mut NVSDK_NGX_Handle,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_D3D11_ReleaseFeature(InHandle: *mut NVSDK_NGX_Handle) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_D3D12_ReleaseFeature(InHandle: *mut NVSDK_NGX_Handle) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_CUDA_ReleaseFeature(InHandle: *mut NVSDK_NGX_Handle) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_D3D11_GetFeatureRequirements(
        Adapter: *mut IDXGIAdapter,
        FeatureDiscoveryInfo: *const NVSDK_NGX_FeatureDiscoveryInfo,
        OutSupported: *mut NVSDK_NGX_FeatureRequirement,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_D3D12_GetFeatureRequirements(
        Adapter: *mut IDXGIAdapter,
        FeatureDiscoveryInfo: *const NVSDK_NGX_FeatureDiscoveryInfo,
        OutSupported: *mut NVSDK_NGX_FeatureRequirement,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_D3D11_EvaluateFeature_C(
        InDevCtx: *mut ID3D11DeviceContext,
        InFeatureHandle: *const NVSDK_NGX_Handle,
        InParameters: *const NVSDK_NGX_Parameter,
        InCallback: PFN_NVSDK_NGX_ProgressCallback_C,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_D3D12_EvaluateFeature_C(
        InCmdList: *mut ID3D12GraphicsCommandList,
        InFeatureHandle: *const NVSDK_NGX_Handle,
        InParameters: *const NVSDK_NGX_Parameter,
        InCallback: PFN_NVSDK_NGX_ProgressCallback_C,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_CUDA_EvaluateFeature_C(
        InFeatureHandle: *const NVSDK_NGX_Handle,
        InParameters: *const NVSDK_NGX_Parameter,
        InCallback: PFN_NVSDK_NGX_ProgressCallback_C,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_UpdateFeature(
        ApplicationId: *const NVSDK_NGX_Application_Identifier,
        FeatureID: NVSDK_NGX_Feature,
    ) -> NVSDK_NGX_Result;
}
#[doc = " D3D11"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVSDK_NGX_D3D11_Feature_Eval_Params {
    pub pInColor: *mut ID3D11Resource,
    pub pInOutput: *mut ID3D11Resource,
    #[doc = " OPTIONAL for DLSS"]
    pub InSharpness: f32,
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_D3D11_Feature_Eval_Params() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_D3D11_Feature_Eval_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_D3D11_Feature_Eval_Params>(),
        24usize,
        "Size of NVSDK_NGX_D3D11_Feature_Eval_Params"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_D3D11_Feature_Eval_Params>(),
        8usize,
        "Alignment of NVSDK_NGX_D3D11_Feature_Eval_Params"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInColor) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_D3D11_Feature_Eval_Params::pInColor"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInOutput) as usize - ptr as usize },
        8usize,
        "Offset of field: NVSDK_NGX_D3D11_Feature_Eval_Params::pInOutput"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InSharpness) as usize - ptr as usize },
        16usize,
        "Offset of field: NVSDK_NGX_D3D11_Feature_Eval_Params::InSharpness"
    );
}
impl Default for NVSDK_NGX_D3D11_Feature_Eval_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVSDK_NGX_CUDA_Feature_Eval_Params {
    pub pInColor: *mut CUtexObject,
    pub pInOutput: *mut CUtexObject,
    #[doc = " OPTIONAL for DLSS"]
    pub InSharpness: f32,
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_CUDA_Feature_Eval_Params() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_CUDA_Feature_Eval_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_CUDA_Feature_Eval_Params>(),
        24usize,
        "Size of NVSDK_NGX_CUDA_Feature_Eval_Params"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_CUDA_Feature_Eval_Params>(),
        8usize,
        "Alignment of NVSDK_NGX_CUDA_Feature_Eval_Params"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInColor) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_CUDA_Feature_Eval_Params::pInColor"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInOutput) as usize - ptr as usize },
        8usize,
        "Offset of field: NVSDK_NGX_CUDA_Feature_Eval_Params::pInOutput"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InSharpness) as usize - ptr as usize },
        16usize,
        "Offset of field: NVSDK_NGX_CUDA_Feature_Eval_Params::InSharpness"
    );
}
impl Default for NVSDK_NGX_CUDA_Feature_Eval_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVSDK_NGX_D3D11_GBuffer {
    pub pInAttrib: [*mut ID3D11Resource; 16usize],
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_D3D11_GBuffer() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_D3D11_GBuffer> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_D3D11_GBuffer>(),
        128usize,
        "Size of NVSDK_NGX_D3D11_GBuffer"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_D3D11_GBuffer>(),
        8usize,
        "Alignment of NVSDK_NGX_D3D11_GBuffer"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInAttrib) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_D3D11_GBuffer::pInAttrib"
    );
}
impl Default for NVSDK_NGX_D3D11_GBuffer {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVSDK_NGX_D3D11_DLSS_Eval_Params {
    pub Feature: NVSDK_NGX_D3D11_Feature_Eval_Params,
    pub pInDepth: *mut ID3D11Resource,
    pub pInMotionVectors: *mut ID3D11Resource,
    pub InJitterOffsetX: f32,
    pub InJitterOffsetY: f32,
    pub InRenderSubrectDimensions: NVSDK_NGX_Dimensions,
    #[doc = " OPTIONAL - leave to 0/0.0f if unused"]
    pub InReset: ::std::os::raw::c_int,
    pub InMVScaleX: f32,
    pub InMVScaleY: f32,
    pub pInTransparencyMask: *mut ID3D11Resource,
    pub pInExposureTexture: *mut ID3D11Resource,
    pub pInBiasCurrentColorMask: *mut ID3D11Resource,
    pub InColorSubrectBase: NVSDK_NGX_Coordinates,
    pub InDepthSubrectBase: NVSDK_NGX_Coordinates,
    pub InMVSubrectBase: NVSDK_NGX_Coordinates,
    pub InTranslucencySubrectBase: NVSDK_NGX_Coordinates,
    pub InBiasCurrentColorSubrectBase: NVSDK_NGX_Coordinates,
    pub InOutputSubrectBase: NVSDK_NGX_Coordinates,
    pub InPreExposure: f32,
    pub InExposureScale: f32,
    pub InIndicatorInvertXAxis: ::std::os::raw::c_int,
    pub InIndicatorInvertYAxis: ::std::os::raw::c_int,
    #[doc = " OPTIONAL - only for research purposes"]
    pub GBufferSurface: NVSDK_NGX_D3D11_GBuffer,
    pub InToneMapperType: NVSDK_NGX_ToneMapperType,
    pub pInMotionVectors3D: *mut ID3D11Resource,
    pub pInIsParticleMask: *mut ID3D11Resource,
    pub pInAnimatedTextureMask: *mut ID3D11Resource,
    pub pInDepthHighRes: *mut ID3D11Resource,
    pub pInPositionViewSpace: *mut ID3D11Resource,
    pub InFrameTimeDeltaInMsec: f32,
    pub pInRayTracingHitDistance: *mut ID3D11Resource,
    pub pInMotionVectorsReflections: *mut ID3D11Resource,
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_D3D11_DLSS_Eval_Params() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_D3D11_DLSS_Eval_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_D3D11_DLSS_Eval_Params>(),
        360usize,
        "Size of NVSDK_NGX_D3D11_DLSS_Eval_Params"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_D3D11_DLSS_Eval_Params>(),
        8usize,
        "Alignment of NVSDK_NGX_D3D11_DLSS_Eval_Params"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Feature) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_D3D11_DLSS_Eval_Params::Feature"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInDepth) as usize - ptr as usize },
        24usize,
        "Offset of field: NVSDK_NGX_D3D11_DLSS_Eval_Params::pInDepth"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInMotionVectors) as usize - ptr as usize },
        32usize,
        "Offset of field: NVSDK_NGX_D3D11_DLSS_Eval_Params::pInMotionVectors"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InJitterOffsetX) as usize - ptr as usize },
        40usize,
        "Offset of field: NVSDK_NGX_D3D11_DLSS_Eval_Params::InJitterOffsetX"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InJitterOffsetY) as usize - ptr as usize },
        44usize,
        "Offset of field: NVSDK_NGX_D3D11_DLSS_Eval_Params::InJitterOffsetY"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InRenderSubrectDimensions) as usize - ptr as usize },
        48usize,
        "Offset of field: NVSDK_NGX_D3D11_DLSS_Eval_Params::InRenderSubrectDimensions"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InReset) as usize - ptr as usize },
        56usize,
        "Offset of field: NVSDK_NGX_D3D11_DLSS_Eval_Params::InReset"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InMVScaleX) as usize - ptr as usize },
        60usize,
        "Offset of field: NVSDK_NGX_D3D11_DLSS_Eval_Params::InMVScaleX"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InMVScaleY) as usize - ptr as usize },
        64usize,
        "Offset of field: NVSDK_NGX_D3D11_DLSS_Eval_Params::InMVScaleY"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInTransparencyMask) as usize - ptr as usize },
        72usize,
        "Offset of field: NVSDK_NGX_D3D11_DLSS_Eval_Params::pInTransparencyMask"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInExposureTexture) as usize - ptr as usize },
        80usize,
        "Offset of field: NVSDK_NGX_D3D11_DLSS_Eval_Params::pInExposureTexture"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInBiasCurrentColorMask) as usize - ptr as usize },
        88usize,
        "Offset of field: NVSDK_NGX_D3D11_DLSS_Eval_Params::pInBiasCurrentColorMask"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InColorSubrectBase) as usize - ptr as usize },
        96usize,
        "Offset of field: NVSDK_NGX_D3D11_DLSS_Eval_Params::InColorSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InDepthSubrectBase) as usize - ptr as usize },
        104usize,
        "Offset of field: NVSDK_NGX_D3D11_DLSS_Eval_Params::InDepthSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InMVSubrectBase) as usize - ptr as usize },
        112usize,
        "Offset of field: NVSDK_NGX_D3D11_DLSS_Eval_Params::InMVSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InTranslucencySubrectBase) as usize - ptr as usize },
        120usize,
        "Offset of field: NVSDK_NGX_D3D11_DLSS_Eval_Params::InTranslucencySubrectBase"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InBiasCurrentColorSubrectBase) as usize - ptr as usize
        },
        128usize,
        "Offset of field: NVSDK_NGX_D3D11_DLSS_Eval_Params::InBiasCurrentColorSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InOutputSubrectBase) as usize - ptr as usize },
        136usize,
        "Offset of field: NVSDK_NGX_D3D11_DLSS_Eval_Params::InOutputSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InPreExposure) as usize - ptr as usize },
        144usize,
        "Offset of field: NVSDK_NGX_D3D11_DLSS_Eval_Params::InPreExposure"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InExposureScale) as usize - ptr as usize },
        148usize,
        "Offset of field: NVSDK_NGX_D3D11_DLSS_Eval_Params::InExposureScale"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InIndicatorInvertXAxis) as usize - ptr as usize },
        152usize,
        "Offset of field: NVSDK_NGX_D3D11_DLSS_Eval_Params::InIndicatorInvertXAxis"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InIndicatorInvertYAxis) as usize - ptr as usize },
        156usize,
        "Offset of field: NVSDK_NGX_D3D11_DLSS_Eval_Params::InIndicatorInvertYAxis"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GBufferSurface) as usize - ptr as usize },
        160usize,
        "Offset of field: NVSDK_NGX_D3D11_DLSS_Eval_Params::GBufferSurface"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InToneMapperType) as usize - ptr as usize },
        288usize,
        "Offset of field: NVSDK_NGX_D3D11_DLSS_Eval_Params::InToneMapperType"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInMotionVectors3D) as usize - ptr as usize },
        296usize,
        "Offset of field: NVSDK_NGX_D3D11_DLSS_Eval_Params::pInMotionVectors3D"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInIsParticleMask) as usize - ptr as usize },
        304usize,
        "Offset of field: NVSDK_NGX_D3D11_DLSS_Eval_Params::pInIsParticleMask"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInAnimatedTextureMask) as usize - ptr as usize },
        312usize,
        "Offset of field: NVSDK_NGX_D3D11_DLSS_Eval_Params::pInAnimatedTextureMask"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInDepthHighRes) as usize - ptr as usize },
        320usize,
        "Offset of field: NVSDK_NGX_D3D11_DLSS_Eval_Params::pInDepthHighRes"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInPositionViewSpace) as usize - ptr as usize },
        328usize,
        "Offset of field: NVSDK_NGX_D3D11_DLSS_Eval_Params::pInPositionViewSpace"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InFrameTimeDeltaInMsec) as usize - ptr as usize },
        336usize,
        "Offset of field: NVSDK_NGX_D3D11_DLSS_Eval_Params::InFrameTimeDeltaInMsec"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInRayTracingHitDistance) as usize - ptr as usize },
        344usize,
        "Offset of field: NVSDK_NGX_D3D11_DLSS_Eval_Params::pInRayTracingHitDistance"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInMotionVectorsReflections) as usize - ptr as usize },
        352usize,
        "Offset of field: NVSDK_NGX_D3D11_DLSS_Eval_Params::pInMotionVectorsReflections"
    );
}
impl Default for NVSDK_NGX_D3D11_DLSS_Eval_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVSDK_NGX_D3D11_DLISP_Eval_Params {
    pub Feature: NVSDK_NGX_D3D11_Feature_Eval_Params,
    #[doc = " OPTIONAL - leave to 0/0.0f if unused"]
    pub InRectX: ::std::os::raw::c_uint,
    pub InRectY: ::std::os::raw::c_uint,
    pub InRectW: ::std::os::raw::c_uint,
    pub InRectH: ::std::os::raw::c_uint,
    pub InDenoise: f32,
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_D3D11_DLISP_Eval_Params() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_D3D11_DLISP_Eval_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_D3D11_DLISP_Eval_Params>(),
        48usize,
        "Size of NVSDK_NGX_D3D11_DLISP_Eval_Params"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_D3D11_DLISP_Eval_Params>(),
        8usize,
        "Alignment of NVSDK_NGX_D3D11_DLISP_Eval_Params"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Feature) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_D3D11_DLISP_Eval_Params::Feature"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InRectX) as usize - ptr as usize },
        24usize,
        "Offset of field: NVSDK_NGX_D3D11_DLISP_Eval_Params::InRectX"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InRectY) as usize - ptr as usize },
        28usize,
        "Offset of field: NVSDK_NGX_D3D11_DLISP_Eval_Params::InRectY"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InRectW) as usize - ptr as usize },
        32usize,
        "Offset of field: NVSDK_NGX_D3D11_DLISP_Eval_Params::InRectW"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InRectH) as usize - ptr as usize },
        36usize,
        "Offset of field: NVSDK_NGX_D3D11_DLISP_Eval_Params::InRectH"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InDenoise) as usize - ptr as usize },
        40usize,
        "Offset of field: NVSDK_NGX_D3D11_DLISP_Eval_Params::InDenoise"
    );
}
impl Default for NVSDK_NGX_D3D11_DLISP_Eval_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVSDK_NGX_CUDA_DLISP_Eval_Params {
    pub Feature: NVSDK_NGX_CUDA_Feature_Eval_Params,
    #[doc = " OPTIONAL - leave to 0/0.0f if unused"]
    pub InRectX: ::std::os::raw::c_uint,
    pub InRectY: ::std::os::raw::c_uint,
    pub InRectW: ::std::os::raw::c_uint,
    pub InRectH: ::std::os::raw::c_uint,
    pub InDenoise: f32,
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_CUDA_DLISP_Eval_Params() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_CUDA_DLISP_Eval_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_CUDA_DLISP_Eval_Params>(),
        48usize,
        "Size of NVSDK_NGX_CUDA_DLISP_Eval_Params"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_CUDA_DLISP_Eval_Params>(),
        8usize,
        "Alignment of NVSDK_NGX_CUDA_DLISP_Eval_Params"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Feature) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_CUDA_DLISP_Eval_Params::Feature"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InRectX) as usize - ptr as usize },
        24usize,
        "Offset of field: NVSDK_NGX_CUDA_DLISP_Eval_Params::InRectX"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InRectY) as usize - ptr as usize },
        28usize,
        "Offset of field: NVSDK_NGX_CUDA_DLISP_Eval_Params::InRectY"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InRectW) as usize - ptr as usize },
        32usize,
        "Offset of field: NVSDK_NGX_CUDA_DLISP_Eval_Params::InRectW"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InRectH) as usize - ptr as usize },
        36usize,
        "Offset of field: NVSDK_NGX_CUDA_DLISP_Eval_Params::InRectH"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InDenoise) as usize - ptr as usize },
        40usize,
        "Offset of field: NVSDK_NGX_CUDA_DLISP_Eval_Params::InDenoise"
    );
}
impl Default for NVSDK_NGX_CUDA_DLISP_Eval_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " D3D12"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVSDK_NGX_D3D12_Feature_Eval_Params {
    pub pInColor: *mut ID3D12Resource,
    pub pInOutput: *mut ID3D12Resource,
    #[doc = " OPTIONAL for DLSS"]
    pub InSharpness: f32,
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_D3D12_Feature_Eval_Params() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_D3D12_Feature_Eval_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_D3D12_Feature_Eval_Params>(),
        24usize,
        "Size of NVSDK_NGX_D3D12_Feature_Eval_Params"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_D3D12_Feature_Eval_Params>(),
        8usize,
        "Alignment of NVSDK_NGX_D3D12_Feature_Eval_Params"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInColor) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_D3D12_Feature_Eval_Params::pInColor"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInOutput) as usize - ptr as usize },
        8usize,
        "Offset of field: NVSDK_NGX_D3D12_Feature_Eval_Params::pInOutput"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InSharpness) as usize - ptr as usize },
        16usize,
        "Offset of field: NVSDK_NGX_D3D12_Feature_Eval_Params::InSharpness"
    );
}
impl Default for NVSDK_NGX_D3D12_Feature_Eval_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVSDK_NGX_D3D12_GBuffer {
    pub pInAttrib: [*mut ID3D12Resource; 16usize],
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_D3D12_GBuffer() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_D3D12_GBuffer> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_D3D12_GBuffer>(),
        128usize,
        "Size of NVSDK_NGX_D3D12_GBuffer"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_D3D12_GBuffer>(),
        8usize,
        "Alignment of NVSDK_NGX_D3D12_GBuffer"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInAttrib) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_D3D12_GBuffer::pInAttrib"
    );
}
impl Default for NVSDK_NGX_D3D12_GBuffer {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVSDK_NGX_D3D12_DLSS_Eval_Params {
    pub Feature: NVSDK_NGX_D3D12_Feature_Eval_Params,
    pub pInDepth: *mut ID3D12Resource,
    pub pInMotionVectors: *mut ID3D12Resource,
    pub InJitterOffsetX: f32,
    pub InJitterOffsetY: f32,
    pub InRenderSubrectDimensions: NVSDK_NGX_Dimensions,
    #[doc = " OPTIONAL - leave to 0/0.0f if unused"]
    pub InReset: ::std::os::raw::c_int,
    pub InMVScaleX: f32,
    pub InMVScaleY: f32,
    pub pInTransparencyMask: *mut ID3D12Resource,
    pub pInExposureTexture: *mut ID3D12Resource,
    pub pInBiasCurrentColorMask: *mut ID3D12Resource,
    pub InColorSubrectBase: NVSDK_NGX_Coordinates,
    pub InDepthSubrectBase: NVSDK_NGX_Coordinates,
    pub InMVSubrectBase: NVSDK_NGX_Coordinates,
    pub InTranslucencySubrectBase: NVSDK_NGX_Coordinates,
    pub InBiasCurrentColorSubrectBase: NVSDK_NGX_Coordinates,
    pub InOutputSubrectBase: NVSDK_NGX_Coordinates,
    pub InPreExposure: f32,
    pub InExposureScale: f32,
    pub InIndicatorInvertXAxis: ::std::os::raw::c_int,
    pub InIndicatorInvertYAxis: ::std::os::raw::c_int,
    #[doc = " OPTIONAL - only for research purposes"]
    pub GBufferSurface: NVSDK_NGX_D3D12_GBuffer,
    pub InToneMapperType: NVSDK_NGX_ToneMapperType,
    pub pInMotionVectors3D: *mut ID3D12Resource,
    pub pInIsParticleMask: *mut ID3D12Resource,
    pub pInAnimatedTextureMask: *mut ID3D12Resource,
    pub pInDepthHighRes: *mut ID3D12Resource,
    pub pInPositionViewSpace: *mut ID3D12Resource,
    pub InFrameTimeDeltaInMsec: f32,
    pub pInRayTracingHitDistance: *mut ID3D12Resource,
    pub pInMotionVectorsReflections: *mut ID3D12Resource,
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_D3D12_DLSS_Eval_Params() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_D3D12_DLSS_Eval_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_D3D12_DLSS_Eval_Params>(),
        360usize,
        "Size of NVSDK_NGX_D3D12_DLSS_Eval_Params"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_D3D12_DLSS_Eval_Params>(),
        8usize,
        "Alignment of NVSDK_NGX_D3D12_DLSS_Eval_Params"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Feature) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::Feature"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInDepth) as usize - ptr as usize },
        24usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::pInDepth"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInMotionVectors) as usize - ptr as usize },
        32usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::pInMotionVectors"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InJitterOffsetX) as usize - ptr as usize },
        40usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::InJitterOffsetX"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InJitterOffsetY) as usize - ptr as usize },
        44usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::InJitterOffsetY"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InRenderSubrectDimensions) as usize - ptr as usize },
        48usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::InRenderSubrectDimensions"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InReset) as usize - ptr as usize },
        56usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::InReset"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InMVScaleX) as usize - ptr as usize },
        60usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::InMVScaleX"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InMVScaleY) as usize - ptr as usize },
        64usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::InMVScaleY"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInTransparencyMask) as usize - ptr as usize },
        72usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::pInTransparencyMask"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInExposureTexture) as usize - ptr as usize },
        80usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::pInExposureTexture"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInBiasCurrentColorMask) as usize - ptr as usize },
        88usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::pInBiasCurrentColorMask"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InColorSubrectBase) as usize - ptr as usize },
        96usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::InColorSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InDepthSubrectBase) as usize - ptr as usize },
        104usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::InDepthSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InMVSubrectBase) as usize - ptr as usize },
        112usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::InMVSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InTranslucencySubrectBase) as usize - ptr as usize },
        120usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::InTranslucencySubrectBase"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InBiasCurrentColorSubrectBase) as usize - ptr as usize
        },
        128usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::InBiasCurrentColorSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InOutputSubrectBase) as usize - ptr as usize },
        136usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::InOutputSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InPreExposure) as usize - ptr as usize },
        144usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::InPreExposure"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InExposureScale) as usize - ptr as usize },
        148usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::InExposureScale"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InIndicatorInvertXAxis) as usize - ptr as usize },
        152usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::InIndicatorInvertXAxis"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InIndicatorInvertYAxis) as usize - ptr as usize },
        156usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::InIndicatorInvertYAxis"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GBufferSurface) as usize - ptr as usize },
        160usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::GBufferSurface"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InToneMapperType) as usize - ptr as usize },
        288usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::InToneMapperType"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInMotionVectors3D) as usize - ptr as usize },
        296usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::pInMotionVectors3D"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInIsParticleMask) as usize - ptr as usize },
        304usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::pInIsParticleMask"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInAnimatedTextureMask) as usize - ptr as usize },
        312usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::pInAnimatedTextureMask"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInDepthHighRes) as usize - ptr as usize },
        320usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::pInDepthHighRes"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInPositionViewSpace) as usize - ptr as usize },
        328usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::pInPositionViewSpace"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InFrameTimeDeltaInMsec) as usize - ptr as usize },
        336usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::InFrameTimeDeltaInMsec"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInRayTracingHitDistance) as usize - ptr as usize },
        344usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::pInRayTracingHitDistance"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInMotionVectorsReflections) as usize - ptr as usize },
        352usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::pInMotionVectorsReflections"
    );
}
impl Default for NVSDK_NGX_D3D12_DLSS_Eval_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVSDK_NGX_D3D12_DLISP_Eval_Params {
    pub Feature: NVSDK_NGX_D3D12_Feature_Eval_Params,
    #[doc = " OPTIONAL"]
    pub InRectX: ::std::os::raw::c_uint,
    pub InRectY: ::std::os::raw::c_uint,
    pub InRectW: ::std::os::raw::c_uint,
    pub InRectH: ::std::os::raw::c_uint,
    pub InDenoise: f32,
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_D3D12_DLISP_Eval_Params() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_D3D12_DLISP_Eval_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_D3D12_DLISP_Eval_Params>(),
        48usize,
        "Size of NVSDK_NGX_D3D12_DLISP_Eval_Params"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_D3D12_DLISP_Eval_Params>(),
        8usize,
        "Alignment of NVSDK_NGX_D3D12_DLISP_Eval_Params"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Feature) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_D3D12_DLISP_Eval_Params::Feature"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InRectX) as usize - ptr as usize },
        24usize,
        "Offset of field: NVSDK_NGX_D3D12_DLISP_Eval_Params::InRectX"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InRectY) as usize - ptr as usize },
        28usize,
        "Offset of field: NVSDK_NGX_D3D12_DLISP_Eval_Params::InRectY"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InRectW) as usize - ptr as usize },
        32usize,
        "Offset of field: NVSDK_NGX_D3D12_DLISP_Eval_Params::InRectW"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InRectH) as usize - ptr as usize },
        36usize,
        "Offset of field: NVSDK_NGX_D3D12_DLISP_Eval_Params::InRectH"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InDenoise) as usize - ptr as usize },
        40usize,
        "Offset of field: NVSDK_NGX_D3D12_DLISP_Eval_Params::InDenoise"
    );
}
impl Default for NVSDK_NGX_D3D12_DLISP_Eval_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVSDK_NGX_VK_Feature_Eval_Params {
    pub pInColor: *mut NVSDK_NGX_Resource_VK,
    pub pInOutput: *mut NVSDK_NGX_Resource_VK,
    #[doc = " OPTIONAL for DLSS"]
    pub InSharpness: f32,
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_VK_Feature_Eval_Params() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_VK_Feature_Eval_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_VK_Feature_Eval_Params>(),
        24usize,
        "Size of NVSDK_NGX_VK_Feature_Eval_Params"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_VK_Feature_Eval_Params>(),
        8usize,
        "Alignment of NVSDK_NGX_VK_Feature_Eval_Params"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInColor) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_VK_Feature_Eval_Params::pInColor"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInOutput) as usize - ptr as usize },
        8usize,
        "Offset of field: NVSDK_NGX_VK_Feature_Eval_Params::pInOutput"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InSharpness) as usize - ptr as usize },
        16usize,
        "Offset of field: NVSDK_NGX_VK_Feature_Eval_Params::InSharpness"
    );
}
impl Default for NVSDK_NGX_VK_Feature_Eval_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVSDK_NGX_VK_GBuffer {
    pub pInAttrib: [*mut NVSDK_NGX_Resource_VK; 16usize],
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_VK_GBuffer() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_VK_GBuffer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_VK_GBuffer>(),
        128usize,
        "Size of NVSDK_NGX_VK_GBuffer"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_VK_GBuffer>(),
        8usize,
        "Alignment of NVSDK_NGX_VK_GBuffer"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInAttrib) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_VK_GBuffer::pInAttrib"
    );
}
impl Default for NVSDK_NGX_VK_GBuffer {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct NVSDK_NGX_Coordinates_VK {
    pub X: ::std::os::raw::c_uint,
    pub Y: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_Coordinates_VK() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_Coordinates_VK> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_Coordinates_VK>(),
        8usize,
        "Size of NVSDK_NGX_Coordinates_VK"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_Coordinates_VK>(),
        4usize,
        "Alignment of NVSDK_NGX_Coordinates_VK"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).X) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_Coordinates_VK::X"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Y) as usize - ptr as usize },
        4usize,
        "Offset of field: NVSDK_NGX_Coordinates_VK::Y"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVSDK_NGX_VK_DLSS_Eval_Params {
    pub Feature: NVSDK_NGX_VK_Feature_Eval_Params,
    pub pInDepth: *mut NVSDK_NGX_Resource_VK,
    pub pInMotionVectors: *mut NVSDK_NGX_Resource_VK,
    pub InJitterOffsetX: f32,
    pub InJitterOffsetY: f32,
    pub InRenderSubrectDimensions: NVSDK_NGX_Dimensions,
    #[doc = " OPTIONAL - leave to 0/0.0f if unused"]
    pub InReset: ::std::os::raw::c_int,
    pub InMVScaleX: f32,
    pub InMVScaleY: f32,
    pub pInTransparencyMask: *mut NVSDK_NGX_Resource_VK,
    pub pInExposureTexture: *mut NVSDK_NGX_Resource_VK,
    pub pInBiasCurrentColorMask: *mut NVSDK_NGX_Resource_VK,
    pub InColorSubrectBase: NVSDK_NGX_Coordinates,
    pub InDepthSubrectBase: NVSDK_NGX_Coordinates,
    pub InMVSubrectBase: NVSDK_NGX_Coordinates,
    pub InTranslucencySubrectBase: NVSDK_NGX_Coordinates,
    pub InBiasCurrentColorSubrectBase: NVSDK_NGX_Coordinates,
    pub InOutputSubrectBase: NVSDK_NGX_Coordinates,
    pub InPreExposure: f32,
    pub InExposureScale: f32,
    pub InIndicatorInvertXAxis: ::std::os::raw::c_int,
    pub InIndicatorInvertYAxis: ::std::os::raw::c_int,
    #[doc = " OPTIONAL - only for research purposes"]
    pub GBufferSurface: NVSDK_NGX_VK_GBuffer,
    pub InToneMapperType: NVSDK_NGX_ToneMapperType,
    pub pInMotionVectors3D: *mut NVSDK_NGX_Resource_VK,
    pub pInIsParticleMask: *mut NVSDK_NGX_Resource_VK,
    pub pInAnimatedTextureMask: *mut NVSDK_NGX_Resource_VK,
    pub pInDepthHighRes: *mut NVSDK_NGX_Resource_VK,
    pub pInPositionViewSpace: *mut NVSDK_NGX_Resource_VK,
    pub InFrameTimeDeltaInMsec: f32,
    pub pInRayTracingHitDistance: *mut NVSDK_NGX_Resource_VK,
    pub pInMotionVectorsReflections: *mut NVSDK_NGX_Resource_VK,
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_VK_DLSS_Eval_Params() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_VK_DLSS_Eval_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_VK_DLSS_Eval_Params>(),
        360usize,
        "Size of NVSDK_NGX_VK_DLSS_Eval_Params"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_VK_DLSS_Eval_Params>(),
        8usize,
        "Alignment of NVSDK_NGX_VK_DLSS_Eval_Params"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Feature) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_VK_DLSS_Eval_Params::Feature"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInDepth) as usize - ptr as usize },
        24usize,
        "Offset of field: NVSDK_NGX_VK_DLSS_Eval_Params::pInDepth"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInMotionVectors) as usize - ptr as usize },
        32usize,
        "Offset of field: NVSDK_NGX_VK_DLSS_Eval_Params::pInMotionVectors"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InJitterOffsetX) as usize - ptr as usize },
        40usize,
        "Offset of field: NVSDK_NGX_VK_DLSS_Eval_Params::InJitterOffsetX"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InJitterOffsetY) as usize - ptr as usize },
        44usize,
        "Offset of field: NVSDK_NGX_VK_DLSS_Eval_Params::InJitterOffsetY"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InRenderSubrectDimensions) as usize - ptr as usize },
        48usize,
        "Offset of field: NVSDK_NGX_VK_DLSS_Eval_Params::InRenderSubrectDimensions"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InReset) as usize - ptr as usize },
        56usize,
        "Offset of field: NVSDK_NGX_VK_DLSS_Eval_Params::InReset"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InMVScaleX) as usize - ptr as usize },
        60usize,
        "Offset of field: NVSDK_NGX_VK_DLSS_Eval_Params::InMVScaleX"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InMVScaleY) as usize - ptr as usize },
        64usize,
        "Offset of field: NVSDK_NGX_VK_DLSS_Eval_Params::InMVScaleY"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInTransparencyMask) as usize - ptr as usize },
        72usize,
        "Offset of field: NVSDK_NGX_VK_DLSS_Eval_Params::pInTransparencyMask"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInExposureTexture) as usize - ptr as usize },
        80usize,
        "Offset of field: NVSDK_NGX_VK_DLSS_Eval_Params::pInExposureTexture"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInBiasCurrentColorMask) as usize - ptr as usize },
        88usize,
        "Offset of field: NVSDK_NGX_VK_DLSS_Eval_Params::pInBiasCurrentColorMask"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InColorSubrectBase) as usize - ptr as usize },
        96usize,
        "Offset of field: NVSDK_NGX_VK_DLSS_Eval_Params::InColorSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InDepthSubrectBase) as usize - ptr as usize },
        104usize,
        "Offset of field: NVSDK_NGX_VK_DLSS_Eval_Params::InDepthSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InMVSubrectBase) as usize - ptr as usize },
        112usize,
        "Offset of field: NVSDK_NGX_VK_DLSS_Eval_Params::InMVSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InTranslucencySubrectBase) as usize - ptr as usize },
        120usize,
        "Offset of field: NVSDK_NGX_VK_DLSS_Eval_Params::InTranslucencySubrectBase"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InBiasCurrentColorSubrectBase) as usize - ptr as usize
        },
        128usize,
        "Offset of field: NVSDK_NGX_VK_DLSS_Eval_Params::InBiasCurrentColorSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InOutputSubrectBase) as usize - ptr as usize },
        136usize,
        "Offset of field: NVSDK_NGX_VK_DLSS_Eval_Params::InOutputSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InPreExposure) as usize - ptr as usize },
        144usize,
        "Offset of field: NVSDK_NGX_VK_DLSS_Eval_Params::InPreExposure"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InExposureScale) as usize - ptr as usize },
        148usize,
        "Offset of field: NVSDK_NGX_VK_DLSS_Eval_Params::InExposureScale"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InIndicatorInvertXAxis) as usize - ptr as usize },
        152usize,
        "Offset of field: NVSDK_NGX_VK_DLSS_Eval_Params::InIndicatorInvertXAxis"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InIndicatorInvertYAxis) as usize - ptr as usize },
        156usize,
        "Offset of field: NVSDK_NGX_VK_DLSS_Eval_Params::InIndicatorInvertYAxis"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GBufferSurface) as usize - ptr as usize },
        160usize,
        "Offset of field: NVSDK_NGX_VK_DLSS_Eval_Params::GBufferSurface"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InToneMapperType) as usize - ptr as usize },
        288usize,
        "Offset of field: NVSDK_NGX_VK_DLSS_Eval_Params::InToneMapperType"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInMotionVectors3D) as usize - ptr as usize },
        296usize,
        "Offset of field: NVSDK_NGX_VK_DLSS_Eval_Params::pInMotionVectors3D"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInIsParticleMask) as usize - ptr as usize },
        304usize,
        "Offset of field: NVSDK_NGX_VK_DLSS_Eval_Params::pInIsParticleMask"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInAnimatedTextureMask) as usize - ptr as usize },
        312usize,
        "Offset of field: NVSDK_NGX_VK_DLSS_Eval_Params::pInAnimatedTextureMask"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInDepthHighRes) as usize - ptr as usize },
        320usize,
        "Offset of field: NVSDK_NGX_VK_DLSS_Eval_Params::pInDepthHighRes"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInPositionViewSpace) as usize - ptr as usize },
        328usize,
        "Offset of field: NVSDK_NGX_VK_DLSS_Eval_Params::pInPositionViewSpace"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InFrameTimeDeltaInMsec) as usize - ptr as usize },
        336usize,
        "Offset of field: NVSDK_NGX_VK_DLSS_Eval_Params::InFrameTimeDeltaInMsec"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInRayTracingHitDistance) as usize - ptr as usize },
        344usize,
        "Offset of field: NVSDK_NGX_VK_DLSS_Eval_Params::pInRayTracingHitDistance"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInMotionVectorsReflections) as usize - ptr as usize },
        352usize,
        "Offset of field: NVSDK_NGX_VK_DLSS_Eval_Params::pInMotionVectorsReflections"
    );
}
impl Default for NVSDK_NGX_VK_DLSS_Eval_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVSDK_NGX_VK_DLISP_Eval_Params {
    pub Feature: NVSDK_NGX_VK_Feature_Eval_Params,
    #[doc = " OPTIONAL - leave to 0/0.0f if unused"]
    pub InRectX: ::std::os::raw::c_uint,
    pub InRectY: ::std::os::raw::c_uint,
    pub InRectW: ::std::os::raw::c_uint,
    pub InRectH: ::std::os::raw::c_uint,
    pub InDenoise: f32,
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_VK_DLISP_Eval_Params() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_VK_DLISP_Eval_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_VK_DLISP_Eval_Params>(),
        48usize,
        "Size of NVSDK_NGX_VK_DLISP_Eval_Params"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_VK_DLISP_Eval_Params>(),
        8usize,
        "Alignment of NVSDK_NGX_VK_DLISP_Eval_Params"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Feature) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_VK_DLISP_Eval_Params::Feature"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InRectX) as usize - ptr as usize },
        24usize,
        "Offset of field: NVSDK_NGX_VK_DLISP_Eval_Params::InRectX"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InRectY) as usize - ptr as usize },
        28usize,
        "Offset of field: NVSDK_NGX_VK_DLISP_Eval_Params::InRectY"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InRectW) as usize - ptr as usize },
        32usize,
        "Offset of field: NVSDK_NGX_VK_DLISP_Eval_Params::InRectW"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InRectH) as usize - ptr as usize },
        36usize,
        "Offset of field: NVSDK_NGX_VK_DLISP_Eval_Params::InRectH"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InDenoise) as usize - ptr as usize },
        40usize,
        "Offset of field: NVSDK_NGX_VK_DLISP_Eval_Params::InDenoise"
    );
}
impl Default for NVSDK_NGX_VK_DLISP_Eval_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum NVSDK_NGX_DLSS_Denoise_Mode {
    NVSDK_NGX_DLSS_Denoise_Mode_Off = 0,
    NVSDK_NGX_DLSS_Denoise_Mode_DLUnified = 1,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum NVSDK_NGX_DLSS_Roughness_Mode {
    NVSDK_NGX_DLSS_Roughness_Mode_Unpacked = 0,
    NVSDK_NGX_DLSS_Roughness_Mode_Packed = 1,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum NVSDK_NGX_DLSS_Depth_Type {
    NVSDK_NGX_DLSS_Depth_Type_Linear = 0,
    NVSDK_NGX_DLSS_Depth_Type_HW = 1,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum NVSDK_NGX_RayReconstruction_Hint_Render_Preset {
    NVSDK_NGX_RayReconstruction_Hint_Render_Preset_Default = 0,
    NVSDK_NGX_RayReconstruction_Hint_Render_Preset_A = 1,
    NVSDK_NGX_RayReconstruction_Hint_Render_Preset_B = 2,
    NVSDK_NGX_RayReconstruction_Hint_Render_Preset_C = 3,
    NVSDK_NGX_RayReconstruction_Hint_Render_Preset_D = 4,
    NVSDK_NGX_RayReconstruction_Hint_Render_Preset_E = 5,
    NVSDK_NGX_RayReconstruction_Hint_Render_Preset_F = 6,
    NVSDK_NGX_RayReconstruction_Hint_Render_Preset_G = 7,
    NVSDK_NGX_RayReconstruction_Hint_Render_Preset_H = 8,
    NVSDK_NGX_RayReconstruction_Hint_Render_Preset_I = 9,
    NVSDK_NGX_RayReconstruction_Hint_Render_Preset_J = 10,
    NVSDK_NGX_RayReconstruction_Hint_Render_Preset_K = 11,
    NVSDK_NGX_RayReconstruction_Hint_Render_Preset_L = 12,
    NVSDK_NGX_RayReconstruction_Hint_Render_Preset_M = 13,
    NVSDK_NGX_RayReconstruction_Hint_Render_Preset_N = 14,
    NVSDK_NGX_RayReconstruction_Hint_Render_Preset_O = 15,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVSDK_NGX_DLSSD_Create_Params {
    pub InDenoiseMode: NVSDK_NGX_DLSS_Denoise_Mode,
    pub InRoughnessMode: NVSDK_NGX_DLSS_Roughness_Mode,
    pub InUseHWDepth: NVSDK_NGX_DLSS_Depth_Type,
    pub InWidth: ::std::os::raw::c_uint,
    pub InHeight: ::std::os::raw::c_uint,
    pub InTargetWidth: ::std::os::raw::c_uint,
    pub InTargetHeight: ::std::os::raw::c_uint,
    #[doc = " OPTIONAL"]
    pub InPerfQualityValue: NVSDK_NGX_PerfQuality_Value,
    pub InFeatureCreateFlags: ::std::os::raw::c_int,
    pub InEnableOutputSubrects: bool,
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_DLSSD_Create_Params() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_DLSSD_Create_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_DLSSD_Create_Params>(),
        40usize,
        "Size of NVSDK_NGX_DLSSD_Create_Params"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_DLSSD_Create_Params>(),
        4usize,
        "Alignment of NVSDK_NGX_DLSSD_Create_Params"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InDenoiseMode) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_DLSSD_Create_Params::InDenoiseMode"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InRoughnessMode) as usize - ptr as usize },
        4usize,
        "Offset of field: NVSDK_NGX_DLSSD_Create_Params::InRoughnessMode"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InUseHWDepth) as usize - ptr as usize },
        8usize,
        "Offset of field: NVSDK_NGX_DLSSD_Create_Params::InUseHWDepth"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InWidth) as usize - ptr as usize },
        12usize,
        "Offset of field: NVSDK_NGX_DLSSD_Create_Params::InWidth"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InHeight) as usize - ptr as usize },
        16usize,
        "Offset of field: NVSDK_NGX_DLSSD_Create_Params::InHeight"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InTargetWidth) as usize - ptr as usize },
        20usize,
        "Offset of field: NVSDK_NGX_DLSSD_Create_Params::InTargetWidth"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InTargetHeight) as usize - ptr as usize },
        24usize,
        "Offset of field: NVSDK_NGX_DLSSD_Create_Params::InTargetHeight"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InPerfQualityValue) as usize - ptr as usize },
        28usize,
        "Offset of field: NVSDK_NGX_DLSSD_Create_Params::InPerfQualityValue"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InFeatureCreateFlags) as usize - ptr as usize },
        32usize,
        "Offset of field: NVSDK_NGX_DLSSD_Create_Params::InFeatureCreateFlags"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InEnableOutputSubrects) as usize - ptr as usize },
        36usize,
        "Offset of field: NVSDK_NGX_DLSSD_Create_Params::InEnableOutputSubrects"
    );
}
impl Default for NVSDK_NGX_DLSSD_Create_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVSDK_NGX_VK_DLSSD_Eval_Params {
    pub pInDiffuseAlbedo: *mut NVSDK_NGX_Resource_VK,
    pub pInSpecularAlbedo: *mut NVSDK_NGX_Resource_VK,
    pub pInNormals: *mut NVSDK_NGX_Resource_VK,
    pub pInRoughness: *mut NVSDK_NGX_Resource_VK,
    pub pInColor: *mut NVSDK_NGX_Resource_VK,
    pub pInOutput: *mut NVSDK_NGX_Resource_VK,
    pub pInDepth: *mut NVSDK_NGX_Resource_VK,
    pub pInMotionVectors: *mut NVSDK_NGX_Resource_VK,
    pub InJitterOffsetX: f32,
    pub InJitterOffsetY: f32,
    pub InRenderSubrectDimensions: NVSDK_NGX_Dimensions,
    #[doc = " OPTIONAL - leave to 0/0.0f if unused"]
    pub InReset: ::std::os::raw::c_int,
    pub InMVScaleX: f32,
    pub InMVScaleY: f32,
    pub pInTransparencyMask: *mut NVSDK_NGX_Resource_VK,
    pub pInExposureTexture: *mut NVSDK_NGX_Resource_VK,
    pub pInBiasCurrentColorMask: *mut NVSDK_NGX_Resource_VK,
    pub InDiffuseAlbedoSubrectBase: NVSDK_NGX_Coordinates,
    pub InSpecularAlbedoSubrectBase: NVSDK_NGX_Coordinates,
    pub InNormalsSubrectBase: NVSDK_NGX_Coordinates,
    pub InRoughnessSubrectBase: NVSDK_NGX_Coordinates,
    pub InColorSubrectBase: NVSDK_NGX_Coordinates,
    pub InDepthSubrectBase: NVSDK_NGX_Coordinates,
    pub InMVSubrectBase: NVSDK_NGX_Coordinates,
    pub InTranslucencySubrectBase: NVSDK_NGX_Coordinates,
    pub InBiasCurrentColorSubrectBase: NVSDK_NGX_Coordinates,
    pub InOutputSubrectBase: NVSDK_NGX_Coordinates,
    pub InPreExposure: f32,
    pub InExposureScale: f32,
    pub InIndicatorInvertXAxis: ::std::os::raw::c_int,
    pub InIndicatorInvertYAxis: ::std::os::raw::c_int,
    #[doc = " OPTIONAL - only for research purposes"]
    pub pInReflectedAlbedo: *mut NVSDK_NGX_Resource_VK,
    pub pInColorBeforeParticles: *mut NVSDK_NGX_Resource_VK,
    pub pInColorAfterParticles: *mut NVSDK_NGX_Resource_VK,
    pub pInColorBeforeTransparency: *mut NVSDK_NGX_Resource_VK,
    pub pInColorAfterTransparency: *mut NVSDK_NGX_Resource_VK,
    pub pInColorBeforeFog: *mut NVSDK_NGX_Resource_VK,
    pub pInColorAfterFog: *mut NVSDK_NGX_Resource_VK,
    pub pInScreenSpaceSubsurfaceScatteringGuide: *mut NVSDK_NGX_Resource_VK,
    pub pInColorBeforeScreenSpaceSubsurfaceScattering: *mut NVSDK_NGX_Resource_VK,
    pub pInColorAfterScreenSpaceSubsurfaceScattering: *mut NVSDK_NGX_Resource_VK,
    pub pInScreenSpaceRefractionGuide: *mut NVSDK_NGX_Resource_VK,
    pub pInColorBeforeScreenSpaceRefraction: *mut NVSDK_NGX_Resource_VK,
    pub pInColorAfterScreenSpaceRefraction: *mut NVSDK_NGX_Resource_VK,
    pub pInDepthOfFieldGuide: *mut NVSDK_NGX_Resource_VK,
    pub pInColorBeforeDepthOfField: *mut NVSDK_NGX_Resource_VK,
    pub pInColorAfterDepthOfField: *mut NVSDK_NGX_Resource_VK,
    pub pInDiffuseHitDistance: *mut NVSDK_NGX_Resource_VK,
    pub pInSpecularHitDistance: *mut NVSDK_NGX_Resource_VK,
    pub pInDiffuseRayDirection: *mut NVSDK_NGX_Resource_VK,
    pub pInSpecularRayDirection: *mut NVSDK_NGX_Resource_VK,
    pub pInDiffuseRayDirectionHitDistance: *mut NVSDK_NGX_Resource_VK,
    pub pInSpecularRayDirectionHitDistance: *mut NVSDK_NGX_Resource_VK,
    pub InReflectedAlbedoSubrectBase: NVSDK_NGX_Coordinates,
    pub InColorBeforeParticlesSubrectBase: NVSDK_NGX_Coordinates,
    pub InColorAfterParticlesSubrectBase: NVSDK_NGX_Coordinates,
    pub InColorBeforeTransparencySubrectBase: NVSDK_NGX_Coordinates,
    pub InColorAfterTransparencySubrectBase: NVSDK_NGX_Coordinates,
    pub InColorBeforeFogSubrectBase: NVSDK_NGX_Coordinates,
    pub InColorAfterFogSubrectBase: NVSDK_NGX_Coordinates,
    pub InScreenSpaceSubsurfaceScatteringGuideSubrectBase: NVSDK_NGX_Coordinates,
    pub InColorBeforeScreenSpaceSubsurfaceScatteringSubrectBase: NVSDK_NGX_Coordinates,
    pub InColorAfterScreenSpaceSubsurfaceScatteringSubrectBase: NVSDK_NGX_Coordinates,
    pub InScreenSpaceRefractionGuideSubrectBase: NVSDK_NGX_Coordinates,
    pub InColorBeforeScreenSpaceRefractionSubrectBase: NVSDK_NGX_Coordinates,
    pub InColorAfterScreenSpaceRefractionSubrectBase: NVSDK_NGX_Coordinates,
    pub InDepthOfFieldGuideSubrectBase: NVSDK_NGX_Coordinates,
    pub InColorBeforeDepthOfFieldSubrectBase: NVSDK_NGX_Coordinates,
    pub InColorAfterDepthOfFieldSubrectBase: NVSDK_NGX_Coordinates,
    pub InDiffuseHitDistanceSubrectBase: NVSDK_NGX_Coordinates,
    pub InSpecularHitDistanceSubrectBase: NVSDK_NGX_Coordinates,
    pub InDiffuseRayDirectionSubrectBase: NVSDK_NGX_Coordinates,
    pub InSpecularRayDirectionSubrectBase: NVSDK_NGX_Coordinates,
    pub InDiffuseRayDirectionHitDistanceSubrectBase: NVSDK_NGX_Coordinates,
    pub InSpecularRayDirectionHitDistanceSubrectBase: NVSDK_NGX_Coordinates,
    pub pInWorldToViewMatrix: *mut f32,
    pub pInViewToClipMatrix: *mut f32,
    pub GBufferSurface: NVSDK_NGX_VK_GBuffer,
    pub InToneMapperType: NVSDK_NGX_ToneMapperType,
    pub pInMotionVectors3D: *mut NVSDK_NGX_Resource_VK,
    pub pInIsParticleMask: *mut NVSDK_NGX_Resource_VK,
    pub pInAnimatedTextureMask: *mut NVSDK_NGX_Resource_VK,
    pub pInDepthHighRes: *mut NVSDK_NGX_Resource_VK,
    pub pInPositionViewSpace: *mut NVSDK_NGX_Resource_VK,
    pub InFrameTimeDeltaInMsec: f32,
    pub pInRayTracingHitDistance: *mut NVSDK_NGX_Resource_VK,
    pub pInMotionVectorsReflections: *mut NVSDK_NGX_Resource_VK,
    pub pInTransparencyLayer: *mut NVSDK_NGX_Resource_VK,
    pub InTransparencyLayerSubrectBase: NVSDK_NGX_Coordinates,
    pub pInTransparencyLayerOpacity: *mut NVSDK_NGX_Resource_VK,
    pub InTransparencyLayerOpacitySubrectBase: NVSDK_NGX_Coordinates,
    pub pInTransparencyLayerMvecs: *mut NVSDK_NGX_Resource_VK,
    pub InTransparencyLayerMvecsSubrectBase: NVSDK_NGX_Coordinates,
    pub pInDisocclusionMask: *mut NVSDK_NGX_Resource_VK,
    pub InDisocclusionMaskSubrectBase: NVSDK_NGX_Coordinates,
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_VK_DLSSD_Eval_Params() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_VK_DLSSD_Eval_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_VK_DLSSD_Eval_Params>(),
        848usize,
        "Size of NVSDK_NGX_VK_DLSSD_Eval_Params"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_VK_DLSSD_Eval_Params>(),
        8usize,
        "Alignment of NVSDK_NGX_VK_DLSSD_Eval_Params"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInDiffuseAlbedo) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInDiffuseAlbedo"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInSpecularAlbedo) as usize - ptr as usize },
        8usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInSpecularAlbedo"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInNormals) as usize - ptr as usize },
        16usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInNormals"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInRoughness) as usize - ptr as usize },
        24usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInRoughness"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInColor) as usize - ptr as usize },
        32usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInColor"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInOutput) as usize - ptr as usize },
        40usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInOutput"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInDepth) as usize - ptr as usize },
        48usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInDepth"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInMotionVectors) as usize - ptr as usize },
        56usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInMotionVectors"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InJitterOffsetX) as usize - ptr as usize },
        64usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InJitterOffsetX"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InJitterOffsetY) as usize - ptr as usize },
        68usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InJitterOffsetY"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InRenderSubrectDimensions) as usize - ptr as usize },
        72usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InRenderSubrectDimensions"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InReset) as usize - ptr as usize },
        80usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InReset"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InMVScaleX) as usize - ptr as usize },
        84usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InMVScaleX"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InMVScaleY) as usize - ptr as usize },
        88usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InMVScaleY"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInTransparencyMask) as usize - ptr as usize },
        96usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInTransparencyMask"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInExposureTexture) as usize - ptr as usize },
        104usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInExposureTexture"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInBiasCurrentColorMask) as usize - ptr as usize },
        112usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInBiasCurrentColorMask"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InDiffuseAlbedoSubrectBase) as usize - ptr as usize },
        120usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InDiffuseAlbedoSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InSpecularAlbedoSubrectBase) as usize - ptr as usize },
        128usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InSpecularAlbedoSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InNormalsSubrectBase) as usize - ptr as usize },
        136usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InNormalsSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InRoughnessSubrectBase) as usize - ptr as usize },
        144usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InRoughnessSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InColorSubrectBase) as usize - ptr as usize },
        152usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InColorSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InDepthSubrectBase) as usize - ptr as usize },
        160usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InDepthSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InMVSubrectBase) as usize - ptr as usize },
        168usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InMVSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InTranslucencySubrectBase) as usize - ptr as usize },
        176usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InTranslucencySubrectBase"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InBiasCurrentColorSubrectBase) as usize - ptr as usize
        },
        184usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InBiasCurrentColorSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InOutputSubrectBase) as usize - ptr as usize },
        192usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InOutputSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InPreExposure) as usize - ptr as usize },
        200usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InPreExposure"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InExposureScale) as usize - ptr as usize },
        204usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InExposureScale"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InIndicatorInvertXAxis) as usize - ptr as usize },
        208usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InIndicatorInvertXAxis"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InIndicatorInvertYAxis) as usize - ptr as usize },
        212usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InIndicatorInvertYAxis"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInReflectedAlbedo) as usize - ptr as usize },
        216usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInReflectedAlbedo"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInColorBeforeParticles) as usize - ptr as usize },
        224usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInColorBeforeParticles"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInColorAfterParticles) as usize - ptr as usize },
        232usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInColorAfterParticles"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInColorBeforeTransparency) as usize - ptr as usize },
        240usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInColorBeforeTransparency"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInColorAfterTransparency) as usize - ptr as usize },
        248usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInColorAfterTransparency"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInColorBeforeFog) as usize - ptr as usize },
        256usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInColorBeforeFog"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInColorAfterFog) as usize - ptr as usize },
        264usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInColorAfterFog"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pInScreenSpaceSubsurfaceScatteringGuide) as usize
                - ptr as usize
        },
        272usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInScreenSpaceSubsurfaceScatteringGuide"
    );
    assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . pInColorBeforeScreenSpaceSubsurfaceScattering) as usize - ptr as usize } , 280usize , "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInColorBeforeScreenSpaceSubsurfaceScattering");
    assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . pInColorAfterScreenSpaceSubsurfaceScattering) as usize - ptr as usize } , 288usize , "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInColorAfterScreenSpaceSubsurfaceScattering");
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pInScreenSpaceRefractionGuide) as usize - ptr as usize
        },
        296usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInScreenSpaceRefractionGuide"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pInColorBeforeScreenSpaceRefraction) as usize - ptr as usize
        },
        304usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInColorBeforeScreenSpaceRefraction"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pInColorAfterScreenSpaceRefraction) as usize - ptr as usize
        },
        312usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInColorAfterScreenSpaceRefraction"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInDepthOfFieldGuide) as usize - ptr as usize },
        320usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInDepthOfFieldGuide"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInColorBeforeDepthOfField) as usize - ptr as usize },
        328usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInColorBeforeDepthOfField"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInColorAfterDepthOfField) as usize - ptr as usize },
        336usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInColorAfterDepthOfField"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInDiffuseHitDistance) as usize - ptr as usize },
        344usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInDiffuseHitDistance"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInSpecularHitDistance) as usize - ptr as usize },
        352usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInSpecularHitDistance"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInDiffuseRayDirection) as usize - ptr as usize },
        360usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInDiffuseRayDirection"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInSpecularRayDirection) as usize - ptr as usize },
        368usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInSpecularRayDirection"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pInDiffuseRayDirectionHitDistance) as usize - ptr as usize
        },
        376usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInDiffuseRayDirectionHitDistance"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pInSpecularRayDirectionHitDistance) as usize - ptr as usize
        },
        384usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInSpecularRayDirectionHitDistance"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InReflectedAlbedoSubrectBase) as usize - ptr as usize
        },
        392usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InReflectedAlbedoSubrectBase"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InColorBeforeParticlesSubrectBase) as usize - ptr as usize
        },
        400usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InColorBeforeParticlesSubrectBase"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InColorAfterParticlesSubrectBase) as usize - ptr as usize
        },
        408usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InColorAfterParticlesSubrectBase"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InColorBeforeTransparencySubrectBase) as usize
                - ptr as usize
        },
        416usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InColorBeforeTransparencySubrectBase"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InColorAfterTransparencySubrectBase) as usize - ptr as usize
        },
        424usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InColorAfterTransparencySubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InColorBeforeFogSubrectBase) as usize - ptr as usize },
        432usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InColorBeforeFogSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InColorAfterFogSubrectBase) as usize - ptr as usize },
        440usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InColorAfterFogSubrectBase"
    );
    assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . InScreenSpaceSubsurfaceScatteringGuideSubrectBase) as usize - ptr as usize } , 448usize , "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InScreenSpaceSubsurfaceScatteringGuideSubrectBase");
    assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . InColorBeforeScreenSpaceSubsurfaceScatteringSubrectBase) as usize - ptr as usize } , 456usize , "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InColorBeforeScreenSpaceSubsurfaceScatteringSubrectBase");
    assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . InColorAfterScreenSpaceSubsurfaceScatteringSubrectBase) as usize - ptr as usize } , 464usize , "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InColorAfterScreenSpaceSubsurfaceScatteringSubrectBase");
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InScreenSpaceRefractionGuideSubrectBase) as usize
                - ptr as usize
        },
        472usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InScreenSpaceRefractionGuideSubrectBase"
    );
    assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . InColorBeforeScreenSpaceRefractionSubrectBase) as usize - ptr as usize } , 480usize , "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InColorBeforeScreenSpaceRefractionSubrectBase");
    assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . InColorAfterScreenSpaceRefractionSubrectBase) as usize - ptr as usize } , 488usize , "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InColorAfterScreenSpaceRefractionSubrectBase");
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InDepthOfFieldGuideSubrectBase) as usize - ptr as usize
        },
        496usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InDepthOfFieldGuideSubrectBase"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InColorBeforeDepthOfFieldSubrectBase) as usize
                - ptr as usize
        },
        504usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InColorBeforeDepthOfFieldSubrectBase"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InColorAfterDepthOfFieldSubrectBase) as usize - ptr as usize
        },
        512usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InColorAfterDepthOfFieldSubrectBase"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InDiffuseHitDistanceSubrectBase) as usize - ptr as usize
        },
        520usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InDiffuseHitDistanceSubrectBase"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InSpecularHitDistanceSubrectBase) as usize - ptr as usize
        },
        528usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InSpecularHitDistanceSubrectBase"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InDiffuseRayDirectionSubrectBase) as usize - ptr as usize
        },
        536usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InDiffuseRayDirectionSubrectBase"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InSpecularRayDirectionSubrectBase) as usize - ptr as usize
        },
        544usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InSpecularRayDirectionSubrectBase"
    );
    assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . InDiffuseRayDirectionHitDistanceSubrectBase) as usize - ptr as usize } , 552usize , "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InDiffuseRayDirectionHitDistanceSubrectBase");
    assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . InSpecularRayDirectionHitDistanceSubrectBase) as usize - ptr as usize } , 560usize , "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InSpecularRayDirectionHitDistanceSubrectBase");
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInWorldToViewMatrix) as usize - ptr as usize },
        568usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInWorldToViewMatrix"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInViewToClipMatrix) as usize - ptr as usize },
        576usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInViewToClipMatrix"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GBufferSurface) as usize - ptr as usize },
        584usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::GBufferSurface"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InToneMapperType) as usize - ptr as usize },
        712usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InToneMapperType"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInMotionVectors3D) as usize - ptr as usize },
        720usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInMotionVectors3D"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInIsParticleMask) as usize - ptr as usize },
        728usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInIsParticleMask"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInAnimatedTextureMask) as usize - ptr as usize },
        736usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInAnimatedTextureMask"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInDepthHighRes) as usize - ptr as usize },
        744usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInDepthHighRes"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInPositionViewSpace) as usize - ptr as usize },
        752usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInPositionViewSpace"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InFrameTimeDeltaInMsec) as usize - ptr as usize },
        760usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InFrameTimeDeltaInMsec"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInRayTracingHitDistance) as usize - ptr as usize },
        768usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInRayTracingHitDistance"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInMotionVectorsReflections) as usize - ptr as usize },
        776usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInMotionVectorsReflections"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInTransparencyLayer) as usize - ptr as usize },
        784usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInTransparencyLayer"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InTransparencyLayerSubrectBase) as usize - ptr as usize
        },
        792usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InTransparencyLayerSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInTransparencyLayerOpacity) as usize - ptr as usize },
        800usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInTransparencyLayerOpacity"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InTransparencyLayerOpacitySubrectBase) as usize
                - ptr as usize
        },
        808usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InTransparencyLayerOpacitySubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInTransparencyLayerMvecs) as usize - ptr as usize },
        816usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInTransparencyLayerMvecs"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InTransparencyLayerMvecsSubrectBase) as usize - ptr as usize
        },
        824usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InTransparencyLayerMvecsSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInDisocclusionMask) as usize - ptr as usize },
        832usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::pInDisocclusionMask"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InDisocclusionMaskSubrectBase) as usize - ptr as usize
        },
        840usize,
        "Offset of field: NVSDK_NGX_VK_DLSSD_Eval_Params::InDisocclusionMaskSubrectBase"
    );
}
impl Default for NVSDK_NGX_VK_DLSSD_Eval_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn HELPERS_NGX_DLSS_GET_OPTIMAL_SETTINGS(
        pInParams: *mut NVSDK_NGX_Parameter,
        InUserSelectedWidth: ::std::os::raw::c_uint,
        InUserSelectedHeight: ::std::os::raw::c_uint,
        InPerfQualityValue: NVSDK_NGX_PerfQuality_Value,
        pOutRenderOptimalWidth: *mut ::std::os::raw::c_uint,
        pOutRenderOptimalHeight: *mut ::std::os::raw::c_uint,
        pOutRenderMaxWidth: *mut ::std::os::raw::c_uint,
        pOutRenderMaxHeight: *mut ::std::os::raw::c_uint,
        pOutRenderMinWidth: *mut ::std::os::raw::c_uint,
        pOutRenderMinHeight: *mut ::std::os::raw::c_uint,
        pOutSharpness: *mut f32,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn HELPERS_NGX_VULKAN_CREATE_DLSS_EXT1(
        InDevice: VkDevice,
        InCmdList: VkCommandBuffer,
        InCreationNodeMask: ::std::os::raw::c_uint,
        InVisibilityNodeMask: ::std::os::raw::c_uint,
        ppOutHandle: *mut *mut NVSDK_NGX_Handle,
        pInParams: *mut NVSDK_NGX_Parameter,
        pInDlssCreateParams: *mut NVSDK_NGX_DLSS_Create_Params,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn HELPERS_NGX_VULKAN_EVALUATE_DLSS_EXT(
        InCmdList: VkCommandBuffer,
        pInHandle: *mut NVSDK_NGX_Handle,
        pInParams: *mut NVSDK_NGX_Parameter,
        pInDlssEvalParams: *mut NVSDK_NGX_VK_DLSS_Eval_Params,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn HELPERS_NGX_VULKAN_CREATE_DLSSD_EXT1(
        InDevice: VkDevice,
        InCmdList: VkCommandBuffer,
        InCreationNodeMask: ::std::os::raw::c_uint,
        InVisibilityNodeMask: ::std::os::raw::c_uint,
        ppOutHandle: *mut *mut NVSDK_NGX_Handle,
        pInParams: *mut NVSDK_NGX_Parameter,
        pInDlssDCreateParams: *mut NVSDK_NGX_DLSSD_Create_Params,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn HELPERS_NGX_VULKAN_EVALUATE_DLSSD_EXT(
        InCmdList: VkCommandBuffer,
        pInHandle: *mut NVSDK_NGX_Handle,
        pInParams: *mut NVSDK_NGX_Parameter,
        pInDlssDEvalParams: *mut NVSDK_NGX_VK_DLSSD_Eval_Params,
    ) -> NVSDK_NGX_Result;
}
