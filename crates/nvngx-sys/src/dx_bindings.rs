/* automatically generated by rust-bindgen 0.72.0 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D12Resource {
    _unused: [u8; 0],
}
pub type PFN_NVSDK_NGX_Parameter_SetD3d12Resource = ::std::option::Option<
    unsafe extern "C" fn(
        InParameter: *mut NVSDK_NGX_Parameter,
        InName: *const ::std::os::raw::c_char,
        InValue: *mut ID3D12Resource,
    ),
>;
extern "C" {
    pub fn NVSDK_NGX_Parameter_SetD3d12Resource(
        InParameter: *mut NVSDK_NGX_Parameter,
        InName: *const ::std::os::raw::c_char,
        InValue: *mut ID3D12Resource,
    );
}
pub type PFN_NVSDK_NGX_Parameter_GetD3d12Resource = ::std::option::Option<
    unsafe extern "C" fn(
        InParameter: *mut NVSDK_NGX_Parameter,
        InName: *const ::std::os::raw::c_char,
        OutValue: *mut *mut ID3D12Resource,
    ) -> NVSDK_NGX_Result,
>;
extern "C" {
    pub fn NVSDK_NGX_Parameter_GetD3d12Resource(
        InParameter: *mut NVSDK_NGX_Parameter,
        InName: *const ::std::os::raw::c_char,
        OutValue: *mut *mut ID3D12Resource,
    ) -> NVSDK_NGX_Result;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IUnknown {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IDXGIAdapter {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D12Device {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D12GraphicsCommandList {
    _unused: [u8; 0],
}
pub type PFN_NVSDK_NGX_D3D12_ResourceAllocCallback = ::std::option::Option<
    unsafe extern "C" fn(
        InDesc: *mut D3D12_RESOURCE_DESC,
        InState: ::std::os::raw::c_int,
        InHeap: *mut CD3DX12_HEAP_PROPERTIES,
        OutResource: *mut *mut ID3D12Resource,
    ),
>;
pub type PFN_NVSDK_NGX_ResourceReleaseCallback =
    ::std::option::Option<unsafe extern "C" fn(InResource: *mut IUnknown)>;
extern "C" {
    pub fn NVSDK_NGX_D3D12_Init(
        InApplicationId: ::std::os::raw::c_ulonglong,
        InApplicationDataPath: *const wchar_t,
        InDevice: *mut ID3D12Device,
        InFeatureInfo: *const NVSDK_NGX_FeatureCommonInfo,
        InSDKVersion: NVSDK_NGX_Version,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_D3D12_Init_with_ProjectID(
        InProjectId: *const ::std::os::raw::c_char,
        InEngineType: NVSDK_NGX_EngineType,
        InEngineVersion: *const ::std::os::raw::c_char,
        InApplicationDataPath: *const wchar_t,
        InDevice: *mut ID3D12Device,
        InFeatureInfo: *const NVSDK_NGX_FeatureCommonInfo,
        InSDKVersion: NVSDK_NGX_Version,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_D3D12_Shutdown1(InDevice: *mut ID3D12Device) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_D3D12_AllocateParameters(
        OutParameters: *mut *mut NVSDK_NGX_Parameter,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_D3D12_GetCapabilityParameters(
        OutParameters: *mut *mut NVSDK_NGX_Parameter,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_D3D12_DestroyParameters(
        InParameters: *mut NVSDK_NGX_Parameter,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_D3D12_GetScratchBufferSize(
        InFeatureId: NVSDK_NGX_Feature,
        InParameters: *const NVSDK_NGX_Parameter,
        OutSizeInBytes: *mut usize,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_D3D12_CreateFeature(
        InCmdList: *mut ID3D12GraphicsCommandList,
        InFeatureID: NVSDK_NGX_Feature,
        InParameters: *mut NVSDK_NGX_Parameter,
        OutHandle: *mut *mut NVSDK_NGX_Handle,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_D3D12_ReleaseFeature(InHandle: *mut NVSDK_NGX_Handle) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_D3D12_GetFeatureRequirements(
        Adapter: *mut IDXGIAdapter,
        FeatureDiscoveryInfo: *const NVSDK_NGX_FeatureDiscoveryInfo,
        OutSupported: *mut NVSDK_NGX_FeatureRequirement,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn NVSDK_NGX_D3D12_EvaluateFeature_C(
        InCmdList: *mut ID3D12GraphicsCommandList,
        InFeatureHandle: *const NVSDK_NGX_Handle,
        InParameters: *const NVSDK_NGX_Parameter,
        InCallback: PFN_NVSDK_NGX_ProgressCallback_C,
    ) -> NVSDK_NGX_Result;
}
#[doc = " D3D12"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVSDK_NGX_D3D12_Feature_Eval_Params {
    pub pInColor: *mut ID3D12Resource,
    pub pInOutput: *mut ID3D12Resource,
    #[doc = " OPTIONAL for DLSS"]
    pub InSharpness: f32,
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_D3D12_Feature_Eval_Params() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_D3D12_Feature_Eval_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_D3D12_Feature_Eval_Params>(),
        24usize,
        "Size of NVSDK_NGX_D3D12_Feature_Eval_Params"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_D3D12_Feature_Eval_Params>(),
        8usize,
        "Alignment of NVSDK_NGX_D3D12_Feature_Eval_Params"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInColor) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_D3D12_Feature_Eval_Params::pInColor"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInOutput) as usize - ptr as usize },
        8usize,
        "Offset of field: NVSDK_NGX_D3D12_Feature_Eval_Params::pInOutput"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InSharpness) as usize - ptr as usize },
        16usize,
        "Offset of field: NVSDK_NGX_D3D12_Feature_Eval_Params::InSharpness"
    );
}
impl Default for NVSDK_NGX_D3D12_Feature_Eval_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVSDK_NGX_D3D12_GBuffer {
    pub pInAttrib: [*mut ID3D12Resource; 16usize],
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_D3D12_GBuffer() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_D3D12_GBuffer> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_D3D12_GBuffer>(),
        128usize,
        "Size of NVSDK_NGX_D3D12_GBuffer"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_D3D12_GBuffer>(),
        8usize,
        "Alignment of NVSDK_NGX_D3D12_GBuffer"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInAttrib) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_D3D12_GBuffer::pInAttrib"
    );
}
impl Default for NVSDK_NGX_D3D12_GBuffer {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct NVSDK_NGX_D3D12_DLSS_Eval_Params {
    pub Feature: NVSDK_NGX_D3D12_Feature_Eval_Params,
    pub pInDepth: *mut ID3D12Resource,
    pub pInMotionVectors: *mut ID3D12Resource,
    pub InJitterOffsetX: f32,
    pub InJitterOffsetY: f32,
    pub InRenderSubrectDimensions: NVSDK_NGX_Dimensions,
    #[doc = " OPTIONAL - leave to 0/0.0f if unused"]
    pub InReset: ::std::os::raw::c_int,
    pub InMVScaleX: f32,
    pub InMVScaleY: f32,
    pub pInTransparencyMask: *mut ID3D12Resource,
    pub pInExposureTexture: *mut ID3D12Resource,
    pub pInBiasCurrentColorMask: *mut ID3D12Resource,
    pub InColorSubrectBase: NVSDK_NGX_Coordinates,
    pub InDepthSubrectBase: NVSDK_NGX_Coordinates,
    pub InMVSubrectBase: NVSDK_NGX_Coordinates,
    pub InTranslucencySubrectBase: NVSDK_NGX_Coordinates,
    pub InBiasCurrentColorSubrectBase: NVSDK_NGX_Coordinates,
    pub InOutputSubrectBase: NVSDK_NGX_Coordinates,
    pub InPreExposure: f32,
    pub InExposureScale: f32,
    pub InIndicatorInvertXAxis: ::std::os::raw::c_int,
    pub InIndicatorInvertYAxis: ::std::os::raw::c_int,
    #[doc = " OPTIONAL - only for research purposes"]
    pub GBufferSurface: NVSDK_NGX_D3D12_GBuffer,
    pub InToneMapperType: NVSDK_NGX_ToneMapperType,
    pub pInMotionVectors3D: *mut ID3D12Resource,
    pub pInIsParticleMask: *mut ID3D12Resource,
    pub pInAnimatedTextureMask: *mut ID3D12Resource,
    pub pInDepthHighRes: *mut ID3D12Resource,
    pub pInPositionViewSpace: *mut ID3D12Resource,
    pub InFrameTimeDeltaInMsec: f32,
    pub pInRayTracingHitDistance: *mut ID3D12Resource,
    pub pInMotionVectorsReflections: *mut ID3D12Resource,
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_D3D12_DLSS_Eval_Params() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_D3D12_DLSS_Eval_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_D3D12_DLSS_Eval_Params>(),
        360usize,
        "Size of NVSDK_NGX_D3D12_DLSS_Eval_Params"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_D3D12_DLSS_Eval_Params>(),
        8usize,
        "Alignment of NVSDK_NGX_D3D12_DLSS_Eval_Params"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Feature) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::Feature"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInDepth) as usize - ptr as usize },
        24usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::pInDepth"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInMotionVectors) as usize - ptr as usize },
        32usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::pInMotionVectors"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InJitterOffsetX) as usize - ptr as usize },
        40usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::InJitterOffsetX"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InJitterOffsetY) as usize - ptr as usize },
        44usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::InJitterOffsetY"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InRenderSubrectDimensions) as usize - ptr as usize },
        48usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::InRenderSubrectDimensions"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InReset) as usize - ptr as usize },
        56usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::InReset"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InMVScaleX) as usize - ptr as usize },
        60usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::InMVScaleX"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InMVScaleY) as usize - ptr as usize },
        64usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::InMVScaleY"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInTransparencyMask) as usize - ptr as usize },
        72usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::pInTransparencyMask"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInExposureTexture) as usize - ptr as usize },
        80usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::pInExposureTexture"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInBiasCurrentColorMask) as usize - ptr as usize },
        88usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::pInBiasCurrentColorMask"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InColorSubrectBase) as usize - ptr as usize },
        96usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::InColorSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InDepthSubrectBase) as usize - ptr as usize },
        104usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::InDepthSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InMVSubrectBase) as usize - ptr as usize },
        112usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::InMVSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InTranslucencySubrectBase) as usize - ptr as usize },
        120usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::InTranslucencySubrectBase"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InBiasCurrentColorSubrectBase) as usize - ptr as usize
        },
        128usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::InBiasCurrentColorSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InOutputSubrectBase) as usize - ptr as usize },
        136usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::InOutputSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InPreExposure) as usize - ptr as usize },
        144usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::InPreExposure"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InExposureScale) as usize - ptr as usize },
        148usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::InExposureScale"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InIndicatorInvertXAxis) as usize - ptr as usize },
        152usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::InIndicatorInvertXAxis"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InIndicatorInvertYAxis) as usize - ptr as usize },
        156usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::InIndicatorInvertYAxis"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GBufferSurface) as usize - ptr as usize },
        160usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::GBufferSurface"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InToneMapperType) as usize - ptr as usize },
        288usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::InToneMapperType"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInMotionVectors3D) as usize - ptr as usize },
        296usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::pInMotionVectors3D"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInIsParticleMask) as usize - ptr as usize },
        304usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::pInIsParticleMask"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInAnimatedTextureMask) as usize - ptr as usize },
        312usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::pInAnimatedTextureMask"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInDepthHighRes) as usize - ptr as usize },
        320usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::pInDepthHighRes"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInPositionViewSpace) as usize - ptr as usize },
        328usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::pInPositionViewSpace"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InFrameTimeDeltaInMsec) as usize - ptr as usize },
        336usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::InFrameTimeDeltaInMsec"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInRayTracingHitDistance) as usize - ptr as usize },
        344usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::pInRayTracingHitDistance"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInMotionVectorsReflections) as usize - ptr as usize },
        352usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSS_Eval_Params::pInMotionVectorsReflections"
    );
}
impl Default for NVSDK_NGX_D3D12_DLSS_Eval_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for NVSDK_NGX_D3D12_DLSS_Eval_Params {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "NVSDK_NGX_D3D12_DLSS_Eval_Params {{ Feature: {:?}, pInDepth: {:?}, pInMotionVectors: {:?}, InJitterOffsetX: {:?}, InJitterOffsetY: {:?}, InReset: {:?}, InMVScaleX: {:?}, InMVScaleY: {:?}, pInTransparencyMask: {:?}, pInExposureTexture: {:?}, pInBiasCurrentColorMask: {:?}, InPreExposure: {:?}, InExposureScale: {:?}, InIndicatorInvertXAxis: {:?}, InIndicatorInvertYAxis: {:?}, GBufferSurface: {:?}, pInMotionVectors3D: {:?}, pInIsParticleMask: {:?}, pInAnimatedTextureMask: {:?}, pInDepthHighRes: {:?}, pInPositionViewSpace: {:?}, InFrameTimeDeltaInMsec: {:?}, pInRayTracingHitDistance: {:?}, pInMotionVectorsReflections: {:?} }}" , self . Feature , self . pInDepth , self . pInMotionVectors , self . InJitterOffsetX , self . InJitterOffsetY , self . InReset , self . InMVScaleX , self . InMVScaleY , self . pInTransparencyMask , self . pInExposureTexture , self . pInBiasCurrentColorMask , self . InPreExposure , self . InExposureScale , self . InIndicatorInvertXAxis , self . InIndicatorInvertYAxis , self . GBufferSurface , self . pInMotionVectors3D , self . pInIsParticleMask , self . pInAnimatedTextureMask , self . pInDepthHighRes , self . pInPositionViewSpace , self . InFrameTimeDeltaInMsec , self . pInRayTracingHitDistance , self . pInMotionVectorsReflections)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVSDK_NGX_D3D12_DLISP_Eval_Params {
    pub Feature: NVSDK_NGX_D3D12_Feature_Eval_Params,
    #[doc = " OPTIONAL"]
    pub InRectX: ::std::os::raw::c_uint,
    pub InRectY: ::std::os::raw::c_uint,
    pub InRectW: ::std::os::raw::c_uint,
    pub InRectH: ::std::os::raw::c_uint,
    pub InDenoise: f32,
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_D3D12_DLISP_Eval_Params() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_D3D12_DLISP_Eval_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_D3D12_DLISP_Eval_Params>(),
        48usize,
        "Size of NVSDK_NGX_D3D12_DLISP_Eval_Params"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_D3D12_DLISP_Eval_Params>(),
        8usize,
        "Alignment of NVSDK_NGX_D3D12_DLISP_Eval_Params"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Feature) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_D3D12_DLISP_Eval_Params::Feature"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InRectX) as usize - ptr as usize },
        24usize,
        "Offset of field: NVSDK_NGX_D3D12_DLISP_Eval_Params::InRectX"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InRectY) as usize - ptr as usize },
        28usize,
        "Offset of field: NVSDK_NGX_D3D12_DLISP_Eval_Params::InRectY"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InRectW) as usize - ptr as usize },
        32usize,
        "Offset of field: NVSDK_NGX_D3D12_DLISP_Eval_Params::InRectW"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InRectH) as usize - ptr as usize },
        36usize,
        "Offset of field: NVSDK_NGX_D3D12_DLISP_Eval_Params::InRectH"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InDenoise) as usize - ptr as usize },
        40usize,
        "Offset of field: NVSDK_NGX_D3D12_DLISP_Eval_Params::InDenoise"
    );
}
impl Default for NVSDK_NGX_D3D12_DLISP_Eval_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct NVSDK_NGX_D3D12_DLSSD_Eval_Params {
    pub pInDiffuseAlbedo: *mut ID3D12Resource,
    pub pInSpecularAlbedo: *mut ID3D12Resource,
    pub pInNormals: *mut ID3D12Resource,
    pub pInRoughness: *mut ID3D12Resource,
    pub pInColor: *mut ID3D12Resource,
    pub pInAlpha: *mut ID3D12Resource,
    pub pInOutput: *mut ID3D12Resource,
    pub pInOutputAlpha: *mut ID3D12Resource,
    pub pInDepth: *mut ID3D12Resource,
    pub pInMotionVectors: *mut ID3D12Resource,
    pub InJitterOffsetX: f32,
    pub InJitterOffsetY: f32,
    pub InRenderSubrectDimensions: NVSDK_NGX_Dimensions,
    #[doc = " OPTIONAL - leave to 0/0.0f if unused"]
    pub InReset: ::std::os::raw::c_int,
    pub InMVScaleX: f32,
    pub InMVScaleY: f32,
    pub pInTransparencyMask: *mut ID3D12Resource,
    pub pInExposureTexture: *mut ID3D12Resource,
    pub pInBiasCurrentColorMask: *mut ID3D12Resource,
    pub InAlphaSubrectBase: NVSDK_NGX_Coordinates,
    pub InOutputAlphaSubrectBase: NVSDK_NGX_Coordinates,
    pub InDiffuseAlbedoSubrectBase: NVSDK_NGX_Coordinates,
    pub InSpecularAlbedoSubrectBase: NVSDK_NGX_Coordinates,
    pub InNormalsSubrectBase: NVSDK_NGX_Coordinates,
    pub InRoughnessSubrectBase: NVSDK_NGX_Coordinates,
    pub InColorSubrectBase: NVSDK_NGX_Coordinates,
    pub InDepthSubrectBase: NVSDK_NGX_Coordinates,
    pub InMVSubrectBase: NVSDK_NGX_Coordinates,
    pub InTranslucencySubrectBase: NVSDK_NGX_Coordinates,
    pub InBiasCurrentColorSubrectBase: NVSDK_NGX_Coordinates,
    pub InOutputSubrectBase: NVSDK_NGX_Coordinates,
    pub pInReflectedAlbedo: *mut ID3D12Resource,
    pub pInColorBeforeParticles: *mut ID3D12Resource,
    pub pInColorAfterParticles: *mut ID3D12Resource,
    pub pInColorBeforeTransparency: *mut ID3D12Resource,
    pub pInColorAfterTransparency: *mut ID3D12Resource,
    pub pInColorBeforeFog: *mut ID3D12Resource,
    pub pInColorAfterFog: *mut ID3D12Resource,
    pub pInScreenSpaceSubsurfaceScatteringGuide: *mut ID3D12Resource,
    pub pInColorBeforeScreenSpaceSubsurfaceScattering: *mut ID3D12Resource,
    pub pInColorAfterScreenSpaceSubsurfaceScattering: *mut ID3D12Resource,
    pub pInScreenSpaceRefractionGuide: *mut ID3D12Resource,
    pub pInColorBeforeScreenSpaceRefraction: *mut ID3D12Resource,
    pub pInColorAfterScreenSpaceRefraction: *mut ID3D12Resource,
    pub pInDepthOfFieldGuide: *mut ID3D12Resource,
    pub pInColorBeforeDepthOfField: *mut ID3D12Resource,
    pub pInColorAfterDepthOfField: *mut ID3D12Resource,
    pub pInDiffuseHitDistance: *mut ID3D12Resource,
    pub pInSpecularHitDistance: *mut ID3D12Resource,
    pub pInDiffuseRayDirection: *mut ID3D12Resource,
    pub pInSpecularRayDirection: *mut ID3D12Resource,
    pub pInDiffuseRayDirectionHitDistance: *mut ID3D12Resource,
    pub pInSpecularRayDirectionHitDistance: *mut ID3D12Resource,
    pub InReflectedAlbedoSubrectBase: NVSDK_NGX_Coordinates,
    pub InColorBeforeParticlesSubrectBase: NVSDK_NGX_Coordinates,
    pub InColorAfterParticlesSubrectBase: NVSDK_NGX_Coordinates,
    pub InColorBeforeTransparencySubrectBase: NVSDK_NGX_Coordinates,
    pub InColorAfterTransparencySubrectBase: NVSDK_NGX_Coordinates,
    pub InColorBeforeFogSubrectBase: NVSDK_NGX_Coordinates,
    pub InColorAfterFogSubrectBase: NVSDK_NGX_Coordinates,
    pub InScreenSpaceSubsurfaceScatteringGuideSubrectBase: NVSDK_NGX_Coordinates,
    pub InScreenSpaceRefractionGuideSubrectBase: NVSDK_NGX_Coordinates,
    pub InDepthOfFieldGuideSubrectBase: NVSDK_NGX_Coordinates,
    pub InDiffuseHitDistanceSubrectBase: NVSDK_NGX_Coordinates,
    pub InSpecularHitDistanceSubrectBase: NVSDK_NGX_Coordinates,
    pub InDiffuseRayDirectionSubrectBase: NVSDK_NGX_Coordinates,
    pub InSpecularRayDirectionSubrectBase: NVSDK_NGX_Coordinates,
    pub InDiffuseRayDirectionHitDistanceSubrectBase: NVSDK_NGX_Coordinates,
    pub InSpecularRayDirectionHitDistanceSubrectBase: NVSDK_NGX_Coordinates,
    pub InColorBeforeScreenSpaceSubsurfaceScatteringSubrectBase: NVSDK_NGX_Coordinates,
    pub InColorAfterScreenSpaceSubsurfaceScatteringSubrectBase: NVSDK_NGX_Coordinates,
    pub InColorBeforeScreenSpaceRefractionSubrectBase: NVSDK_NGX_Coordinates,
    pub InColorAfterScreenSpaceRefractionSubrectBase: NVSDK_NGX_Coordinates,
    pub InColorBeforeDepthOfFieldSubrectBase: NVSDK_NGX_Coordinates,
    pub InColorAfterDepthOfFieldSubtectBase: NVSDK_NGX_Coordinates,
    pub pInWorldToViewMatrix: *mut f32,
    pub pInViewToClipMatrix: *mut f32,
    pub InPreExposure: f32,
    pub InExposureScale: f32,
    pub InIndicatorInvertXAxis: ::std::os::raw::c_int,
    pub InIndicatorInvertYAxis: ::std::os::raw::c_int,
    #[doc = " OPTIONAL - only for research purposes"]
    pub GBufferSurface: NVSDK_NGX_D3D12_GBuffer,
    pub InToneMapperType: NVSDK_NGX_ToneMapperType,
    pub pInMotionVectors3D: *mut ID3D12Resource,
    pub pInIsParticleMask: *mut ID3D12Resource,
    pub pInAnimatedTextureMask: *mut ID3D12Resource,
    pub pInDepthHighRes: *mut ID3D12Resource,
    pub pInPositionViewSpace: *mut ID3D12Resource,
    pub InFrameTimeDeltaInMsec: f32,
    pub pInRayTracingHitDistance: *mut ID3D12Resource,
    pub pInMotionVectorsReflections: *mut ID3D12Resource,
    pub pInTransparencyLayer: *mut ID3D12Resource,
    pub InTransparencyLayerSubrectBase: NVSDK_NGX_Coordinates,
    pub pInTransparencyLayerOpacity: *mut ID3D12Resource,
    pub InTransparencyLayerOpacitySubrectBase: NVSDK_NGX_Coordinates,
    pub pInTransparencyLayerMvecs: *mut ID3D12Resource,
    pub InTransparencyLayerMvecsSubrectBase: NVSDK_NGX_Coordinates,
    pub pInDisocclusionMask: *mut ID3D12Resource,
    pub InDisocclusionMaskSubrectBase: NVSDK_NGX_Coordinates,
}
#[test]
fn bindgen_test_layout_NVSDK_NGX_D3D12_DLSSD_Eval_Params() {
    const UNINIT: ::std::mem::MaybeUninit<NVSDK_NGX_D3D12_DLSSD_Eval_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVSDK_NGX_D3D12_DLSSD_Eval_Params>(),
        880usize,
        "Size of NVSDK_NGX_D3D12_DLSSD_Eval_Params"
    );
    assert_eq!(
        ::std::mem::align_of::<NVSDK_NGX_D3D12_DLSSD_Eval_Params>(),
        8usize,
        "Alignment of NVSDK_NGX_D3D12_DLSSD_Eval_Params"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInDiffuseAlbedo) as usize - ptr as usize },
        0usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInDiffuseAlbedo"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInSpecularAlbedo) as usize - ptr as usize },
        8usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInSpecularAlbedo"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInNormals) as usize - ptr as usize },
        16usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInNormals"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInRoughness) as usize - ptr as usize },
        24usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInRoughness"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInColor) as usize - ptr as usize },
        32usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInColor"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInAlpha) as usize - ptr as usize },
        40usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInAlpha"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInOutput) as usize - ptr as usize },
        48usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInOutput"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInOutputAlpha) as usize - ptr as usize },
        56usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInOutputAlpha"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInDepth) as usize - ptr as usize },
        64usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInDepth"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInMotionVectors) as usize - ptr as usize },
        72usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInMotionVectors"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InJitterOffsetX) as usize - ptr as usize },
        80usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InJitterOffsetX"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InJitterOffsetY) as usize - ptr as usize },
        84usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InJitterOffsetY"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InRenderSubrectDimensions) as usize - ptr as usize },
        88usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InRenderSubrectDimensions"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InReset) as usize - ptr as usize },
        96usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InReset"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InMVScaleX) as usize - ptr as usize },
        100usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InMVScaleX"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InMVScaleY) as usize - ptr as usize },
        104usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InMVScaleY"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInTransparencyMask) as usize - ptr as usize },
        112usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInTransparencyMask"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInExposureTexture) as usize - ptr as usize },
        120usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInExposureTexture"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInBiasCurrentColorMask) as usize - ptr as usize },
        128usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInBiasCurrentColorMask"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InAlphaSubrectBase) as usize - ptr as usize },
        136usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InAlphaSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InOutputAlphaSubrectBase) as usize - ptr as usize },
        144usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InOutputAlphaSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InDiffuseAlbedoSubrectBase) as usize - ptr as usize },
        152usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InDiffuseAlbedoSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InSpecularAlbedoSubrectBase) as usize - ptr as usize },
        160usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InSpecularAlbedoSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InNormalsSubrectBase) as usize - ptr as usize },
        168usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InNormalsSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InRoughnessSubrectBase) as usize - ptr as usize },
        176usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InRoughnessSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InColorSubrectBase) as usize - ptr as usize },
        184usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InColorSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InDepthSubrectBase) as usize - ptr as usize },
        192usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InDepthSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InMVSubrectBase) as usize - ptr as usize },
        200usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InMVSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InTranslucencySubrectBase) as usize - ptr as usize },
        208usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InTranslucencySubrectBase"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InBiasCurrentColorSubrectBase) as usize - ptr as usize
        },
        216usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InBiasCurrentColorSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InOutputSubrectBase) as usize - ptr as usize },
        224usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InOutputSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInReflectedAlbedo) as usize - ptr as usize },
        232usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInReflectedAlbedo"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInColorBeforeParticles) as usize - ptr as usize },
        240usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInColorBeforeParticles"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInColorAfterParticles) as usize - ptr as usize },
        248usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInColorAfterParticles"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInColorBeforeTransparency) as usize - ptr as usize },
        256usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInColorBeforeTransparency"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInColorAfterTransparency) as usize - ptr as usize },
        264usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInColorAfterTransparency"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInColorBeforeFog) as usize - ptr as usize },
        272usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInColorBeforeFog"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInColorAfterFog) as usize - ptr as usize },
        280usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInColorAfterFog"
    );
    assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . pInScreenSpaceSubsurfaceScatteringGuide) as usize - ptr as usize } , 288usize , "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInScreenSpaceSubsurfaceScatteringGuide");
    assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . pInColorBeforeScreenSpaceSubsurfaceScattering) as usize - ptr as usize } , 296usize , "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInColorBeforeScreenSpaceSubsurfaceScattering");
    assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . pInColorAfterScreenSpaceSubsurfaceScattering) as usize - ptr as usize } , 304usize , "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInColorAfterScreenSpaceSubsurfaceScattering");
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pInScreenSpaceRefractionGuide) as usize - ptr as usize
        },
        312usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInScreenSpaceRefractionGuide"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pInColorBeforeScreenSpaceRefraction) as usize - ptr as usize
        },
        320usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInColorBeforeScreenSpaceRefraction"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pInColorAfterScreenSpaceRefraction) as usize - ptr as usize
        },
        328usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInColorAfterScreenSpaceRefraction"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInDepthOfFieldGuide) as usize - ptr as usize },
        336usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInDepthOfFieldGuide"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInColorBeforeDepthOfField) as usize - ptr as usize },
        344usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInColorBeforeDepthOfField"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInColorAfterDepthOfField) as usize - ptr as usize },
        352usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInColorAfterDepthOfField"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInDiffuseHitDistance) as usize - ptr as usize },
        360usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInDiffuseHitDistance"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInSpecularHitDistance) as usize - ptr as usize },
        368usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInSpecularHitDistance"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInDiffuseRayDirection) as usize - ptr as usize },
        376usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInDiffuseRayDirection"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInSpecularRayDirection) as usize - ptr as usize },
        384usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInSpecularRayDirection"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pInDiffuseRayDirectionHitDistance) as usize - ptr as usize
        },
        392usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInDiffuseRayDirectionHitDistance"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pInSpecularRayDirectionHitDistance) as usize - ptr as usize
        },
        400usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInSpecularRayDirectionHitDistance"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InReflectedAlbedoSubrectBase) as usize - ptr as usize
        },
        408usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InReflectedAlbedoSubrectBase"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InColorBeforeParticlesSubrectBase) as usize - ptr as usize
        },
        416usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InColorBeforeParticlesSubrectBase"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InColorAfterParticlesSubrectBase) as usize - ptr as usize
        },
        424usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InColorAfterParticlesSubrectBase"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InColorBeforeTransparencySubrectBase) as usize
                - ptr as usize
        },
        432usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InColorBeforeTransparencySubrectBase"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InColorAfterTransparencySubrectBase) as usize - ptr as usize
        },
        440usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InColorAfterTransparencySubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InColorBeforeFogSubrectBase) as usize - ptr as usize },
        448usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InColorBeforeFogSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InColorAfterFogSubrectBase) as usize - ptr as usize },
        456usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InColorAfterFogSubrectBase"
    );
    assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . InScreenSpaceSubsurfaceScatteringGuideSubrectBase) as usize - ptr as usize } , 464usize , "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InScreenSpaceSubsurfaceScatteringGuideSubrectBase");
    assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . InScreenSpaceRefractionGuideSubrectBase) as usize - ptr as usize } , 472usize , "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InScreenSpaceRefractionGuideSubrectBase");
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InDepthOfFieldGuideSubrectBase) as usize - ptr as usize
        },
        480usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InDepthOfFieldGuideSubrectBase"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InDiffuseHitDistanceSubrectBase) as usize - ptr as usize
        },
        488usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InDiffuseHitDistanceSubrectBase"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InSpecularHitDistanceSubrectBase) as usize - ptr as usize
        },
        496usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InSpecularHitDistanceSubrectBase"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InDiffuseRayDirectionSubrectBase) as usize - ptr as usize
        },
        504usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InDiffuseRayDirectionSubrectBase"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InSpecularRayDirectionSubrectBase) as usize - ptr as usize
        },
        512usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InSpecularRayDirectionSubrectBase"
    );
    assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . InDiffuseRayDirectionHitDistanceSubrectBase) as usize - ptr as usize } , 520usize , "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InDiffuseRayDirectionHitDistanceSubrectBase");
    assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . InSpecularRayDirectionHitDistanceSubrectBase) as usize - ptr as usize } , 528usize , "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InSpecularRayDirectionHitDistanceSubrectBase");
    assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . InColorBeforeScreenSpaceSubsurfaceScatteringSubrectBase) as usize - ptr as usize } , 536usize , "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InColorBeforeScreenSpaceSubsurfaceScatteringSubrectBase");
    assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . InColorAfterScreenSpaceSubsurfaceScatteringSubrectBase) as usize - ptr as usize } , 544usize , "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InColorAfterScreenSpaceSubsurfaceScatteringSubrectBase");
    assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . InColorBeforeScreenSpaceRefractionSubrectBase) as usize - ptr as usize } , 552usize , "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InColorBeforeScreenSpaceRefractionSubrectBase");
    assert_eq ! (unsafe { :: std :: ptr :: addr_of ! ((* ptr) . InColorAfterScreenSpaceRefractionSubrectBase) as usize - ptr as usize } , 560usize , "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InColorAfterScreenSpaceRefractionSubrectBase");
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InColorBeforeDepthOfFieldSubrectBase) as usize
                - ptr as usize
        },
        568usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InColorBeforeDepthOfFieldSubrectBase"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InColorAfterDepthOfFieldSubtectBase) as usize - ptr as usize
        },
        576usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InColorAfterDepthOfFieldSubtectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInWorldToViewMatrix) as usize - ptr as usize },
        584usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInWorldToViewMatrix"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInViewToClipMatrix) as usize - ptr as usize },
        592usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInViewToClipMatrix"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InPreExposure) as usize - ptr as usize },
        600usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InPreExposure"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InExposureScale) as usize - ptr as usize },
        604usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InExposureScale"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InIndicatorInvertXAxis) as usize - ptr as usize },
        608usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InIndicatorInvertXAxis"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InIndicatorInvertYAxis) as usize - ptr as usize },
        612usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InIndicatorInvertYAxis"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GBufferSurface) as usize - ptr as usize },
        616usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::GBufferSurface"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InToneMapperType) as usize - ptr as usize },
        744usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InToneMapperType"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInMotionVectors3D) as usize - ptr as usize },
        752usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInMotionVectors3D"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInIsParticleMask) as usize - ptr as usize },
        760usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInIsParticleMask"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInAnimatedTextureMask) as usize - ptr as usize },
        768usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInAnimatedTextureMask"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInDepthHighRes) as usize - ptr as usize },
        776usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInDepthHighRes"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInPositionViewSpace) as usize - ptr as usize },
        784usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInPositionViewSpace"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InFrameTimeDeltaInMsec) as usize - ptr as usize },
        792usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InFrameTimeDeltaInMsec"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInRayTracingHitDistance) as usize - ptr as usize },
        800usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInRayTracingHitDistance"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInMotionVectorsReflections) as usize - ptr as usize },
        808usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInMotionVectorsReflections"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInTransparencyLayer) as usize - ptr as usize },
        816usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInTransparencyLayer"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InTransparencyLayerSubrectBase) as usize - ptr as usize
        },
        824usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InTransparencyLayerSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInTransparencyLayerOpacity) as usize - ptr as usize },
        832usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInTransparencyLayerOpacity"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InTransparencyLayerOpacitySubrectBase) as usize
                - ptr as usize
        },
        840usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InTransparencyLayerOpacitySubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInTransparencyLayerMvecs) as usize - ptr as usize },
        848usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInTransparencyLayerMvecs"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InTransparencyLayerMvecsSubrectBase) as usize - ptr as usize
        },
        856usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InTransparencyLayerMvecsSubrectBase"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInDisocclusionMask) as usize - ptr as usize },
        864usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::pInDisocclusionMask"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InDisocclusionMaskSubrectBase) as usize - ptr as usize
        },
        872usize,
        "Offset of field: NVSDK_NGX_D3D12_DLSSD_Eval_Params::InDisocclusionMaskSubrectBase"
    );
}
impl Default for NVSDK_NGX_D3D12_DLSSD_Eval_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for NVSDK_NGX_D3D12_DLSSD_Eval_Params {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "NVSDK_NGX_D3D12_DLSSD_Eval_Params {{ pInDiffuseAlbedo: {:?}, pInSpecularAlbedo: {:?}, pInNormals: {:?}, pInRoughness: {:?}, pInColor: {:?}, pInAlpha: {:?}, pInOutput: {:?}, pInOutputAlpha: {:?}, pInDepth: {:?}, pInMotionVectors: {:?}, InJitterOffsetX: {:?}, InJitterOffsetY: {:?}, InReset: {:?}, InMVScaleX: {:?}, InMVScaleY: {:?}, pInTransparencyMask: {:?}, pInExposureTexture: {:?}, pInBiasCurrentColorMask: {:?}, pInReflectedAlbedo: {:?}, pInColorBeforeParticles: {:?}, pInColorAfterParticles: {:?}, pInColorBeforeTransparency: {:?}, pInColorAfterTransparency: {:?}, pInColorBeforeFog: {:?}, pInColorAfterFog: {:?}, pInScreenSpaceSubsurfaceScatteringGuide: {:?}, pInColorBeforeScreenSpaceSubsurfaceScattering: {:?}, pInColorAfterScreenSpaceSubsurfaceScattering: {:?}, pInScreenSpaceRefractionGuide: {:?}, pInColorBeforeScreenSpaceRefraction: {:?}, pInColorAfterScreenSpaceRefraction: {:?}, pInDepthOfFieldGuide: {:?}, pInColorBeforeDepthOfField: {:?}, pInColorAfterDepthOfField: {:?}, pInDiffuseHitDistance: {:?}, pInSpecularHitDistance: {:?}, pInDiffuseRayDirection: {:?}, pInSpecularRayDirection: {:?}, pInDiffuseRayDirectionHitDistance: {:?}, pInSpecularRayDirectionHitDistance: {:?}, pInWorldToViewMatrix: {:?}, pInViewToClipMatrix: {:?}, InPreExposure: {:?}, InExposureScale: {:?}, InIndicatorInvertXAxis: {:?}, InIndicatorInvertYAxis: {:?}, GBufferSurface: {:?}, pInMotionVectors3D: {:?}, pInIsParticleMask: {:?}, pInAnimatedTextureMask: {:?}, pInDepthHighRes: {:?}, pInPositionViewSpace: {:?}, InFrameTimeDeltaInMsec: {:?}, pInRayTracingHitDistance: {:?}, pInMotionVectorsReflections: {:?}, pInTransparencyLayer: {:?}, pInTransparencyLayerOpacity: {:?}, pInTransparencyLayerMvecs: {:?}, pInDisocclusionMask: {:?} }}" , self . pInDiffuseAlbedo , self . pInSpecularAlbedo , self . pInNormals , self . pInRoughness , self . pInColor , self . pInAlpha , self . pInOutput , self . pInOutputAlpha , self . pInDepth , self . pInMotionVectors , self . InJitterOffsetX , self . InJitterOffsetY , self . InReset , self . InMVScaleX , self . InMVScaleY , self . pInTransparencyMask , self . pInExposureTexture , self . pInBiasCurrentColorMask , self . pInReflectedAlbedo , self . pInColorBeforeParticles , self . pInColorAfterParticles , self . pInColorBeforeTransparency , self . pInColorAfterTransparency , self . pInColorBeforeFog , self . pInColorAfterFog , self . pInScreenSpaceSubsurfaceScatteringGuide , self . pInColorBeforeScreenSpaceSubsurfaceScattering , self . pInColorAfterScreenSpaceSubsurfaceScattering , self . pInScreenSpaceRefractionGuide , self . pInColorBeforeScreenSpaceRefraction , self . pInColorAfterScreenSpaceRefraction , self . pInDepthOfFieldGuide , self . pInColorBeforeDepthOfField , self . pInColorAfterDepthOfField , self . pInDiffuseHitDistance , self . pInSpecularHitDistance , self . pInDiffuseRayDirection , self . pInSpecularRayDirection , self . pInDiffuseRayDirectionHitDistance , self . pInSpecularRayDirectionHitDistance , self . pInWorldToViewMatrix , self . pInViewToClipMatrix , self . InPreExposure , self . InExposureScale , self . InIndicatorInvertXAxis , self . InIndicatorInvertYAxis , self . GBufferSurface , self . pInMotionVectors3D , self . pInIsParticleMask , self . pInAnimatedTextureMask , self . pInDepthHighRes , self . pInPositionViewSpace , self . InFrameTimeDeltaInMsec , self . pInRayTracingHitDistance , self . pInMotionVectorsReflections , self . pInTransparencyLayer , self . pInTransparencyLayerOpacity , self . pInTransparencyLayerMvecs , self . pInDisocclusionMask)
    }
}
extern "C" {
    pub fn HELPERS_NGX_D3D12_CREATE_DLSS_EXT(
        pInCmdList: *mut ID3D12GraphicsCommandList,
        InCreationNodeMask: ::std::os::raw::c_uint,
        InVisibilityNodeMask: ::std::os::raw::c_uint,
        ppOutHandle: *mut *mut NVSDK_NGX_Handle,
        pInParams: *mut NVSDK_NGX_Parameter,
        pInDlssCreateParams: *mut NVSDK_NGX_DLSS_Create_Params,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn HELPERS_NGX_D3D12_EVALUATE_DLSS_EXT(
        pInCmdList: *mut ID3D12GraphicsCommandList,
        pInHandle: *mut NVSDK_NGX_Handle,
        pInParams: *mut NVSDK_NGX_Parameter,
        pInDlssEvalParams: *mut NVSDK_NGX_D3D12_DLSS_Eval_Params,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn HELPERS_NGX_D3D12_CREATE_DLSSD_EXT(
        pInCmdList: *mut ID3D12GraphicsCommandList,
        InCreationNodeMask: ::std::os::raw::c_uint,
        InVisibilityNodeMask: ::std::os::raw::c_uint,
        ppOutHandle: *mut *mut NVSDK_NGX_Handle,
        pInParams: *mut NVSDK_NGX_Parameter,
        pInDlssDCreateParams: *mut NVSDK_NGX_DLSSD_Create_Params,
    ) -> NVSDK_NGX_Result;
}
extern "C" {
    pub fn HELPERS_NGX_D3D12_EVALUATE_DLSSD_EXT(
        pInCmdList: *mut ID3D12GraphicsCommandList,
        pInHandle: *mut NVSDK_NGX_Handle,
        pInParams: *mut NVSDK_NGX_Parameter,
        pInDlssDEvalParams: *mut NVSDK_NGX_D3D12_DLSSD_Eval_Params,
    ) -> NVSDK_NGX_Result;
}
